<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用Canvas实现手写板的插件</title>
      <link href="/blog/js/cjzjhsmkn001jz0uz9tog46i4/"/>
      <url>/blog/js/cjzjhsmkn001jz0uz9tog46i4/</url>
      
        <content type="html"><![CDATA[<p>此插件基于Vue。</p><p>前两天在公司项目上遇到了一个签署合同的需求，详细是在PAD端实现手写板完成名字签署,不需要考虑笔画粗细、颜色等。效果如下图所示。</p><p><img src="https://jacokwu.cn/images/blog/tablets-effect.png" alt="效果图"></p><p>实现起来很简单，于是就自己写了一个小插件。此篇文章就在此基础上对笔画粗细、颜色等加以扩展，写一个移动端的手写板。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>对touch和canvas有所了解的可以略过本节。</p><p>在画板上写字，整个写字的过程大概分为三部分，分别为落笔、运笔、提笔（自己瞎概括的）。这三个步骤分别对应了三个移动端的监听方法。其中</p><ul><li>落笔对应的为：<code>touchstart</code>，此方法当手指触摸到屏幕时触发。</li><li>运笔对应的为：<code>touchmove</code>，此方法当手指在屏幕上滑动时触发。</li><li>提笔对应的为：<code>touchend</code>，此方法当手指离开屏幕时触发。</li></ul><p>运行这三个方法就可以模拟写字的整个过程。下面通过一个小例子来描述这三个方法的具体功能与用法。</p><h4 id="touch例子"><a href="#touch例子" class="headerlink" title="touch例子"></a>touch例子</h4><p>功能需求：点击屏幕生成一个小圆，当手指按住移动时小圆随之移动，当手指移开时，小圆消失。<br>类似于手机上的触摸反馈。例子很简单，就不多做介绍了。<br><strong>注意：</strong>如果是在PC端浏览此文章，请打开控制台在手机模式下查看测试下面的例子。</p><iframe height="530" style="width: 100%;" scrolling="no" title="ExYgooN" src="//codepen.io/jacoxxx/embed/ExYgooN/?height=265&theme-id=0&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/jacoxxx/pen/ExYgooN/" target="_blank" rel="noopener">ExYgooN</a> by Jaco Wu  (<a href="https://codepen.io/jacoxxx" target="_blank" rel="noopener">@jacoxxx</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>经过上面的例子我想应该学会了如何在移动端控制自己手指触控屏幕的过程，但是现在还没有笔迹，没有画板，所以我们需要先通过canvas构建一个画板，然后生成笔迹。下面介绍一下这个插件所需要用到的canvas相关方法。</p><h4 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h4><ul><li>方法</li></ul><ol><li><code>getContext(&#39;2d&#39;)</code> 获取一个context 2d对象，即渲染上下文，其中有很多画图相关的方法，对应的还有3d对象。</li><li><code>beginPath()</code> 开始绘制路径</li><li><code>lineTo()</code> 线段的终点</li><li><code>moveTo()</code> 线段的地点</li><li><code>stroke()</code> 给线段上色</li><li><code>closePath()</code> 结束路径绘制</li><li><code>clearRect(x1, y1, x2, y2)</code> 清空一定范围内的内容</li><li><code>toDataURL()</code> 将Canvas数据重新转化成图片文件</li></ol><ul><li>线条相关属性</li></ul><ol><li><code>strokeStyle</code> 线条颜色</li><li><code>lineWidth</code> 线条宽度</li><li><code>lineCap</code> 线条结束线帽<ul><li>butt：默认值。平直边缘</li><li>round：圆形线帽</li><li>square：正方形线帽</li></ul></li><li><code>lineJoin</code> 线条转弯处的线帽<ul><li>值类型同上。</li></ul></li></ol><p>同样以一个小例子来介绍上面的方法和属性。</p><h4 id="canvas例子"><a href="#canvas例子" class="headerlink" title="canvas例子"></a>canvas例子</h4><p>功能需求：在canvas中画一个正方形。</p><iframe height="530" style="width: 100%;" scrolling="no" title="KKPgRYd" src="//codepen.io/jacoxxx/embed/KKPgRYd/?height=265&theme-id=0&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/jacoxxx/pen/KKPgRYd/" target="_blank" rel="noopener">KKPgRYd</a> by Jaco Wu  (<a href="https://codepen.io/jacoxxx" target="_blank" rel="noopener">@jacoxxx</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="插件编写"><a href="#插件编写" class="headerlink" title="插件编写"></a>插件编写</h3><h4 id="搭架子"><a href="#搭架子" class="headerlink" title="搭架子"></a>搭架子</h4><p>首先我们先搭起一个大的架子。其中需要通过props传入的值均先由data替代。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hand-writing&quot;&gt;</span><br><span class="line">      &lt;canvas </span><br><span class="line">        ref=&quot;writingCanvas&quot; </span><br><span class="line">        class=&quot;writing-box&quot; </span><br><span class="line">        :width=&quot;canvasWidth&quot; </span><br><span class="line">        :height=&quot;canvasHeight&quot; </span><br><span class="line">        @touchstart=&quot;onStart&quot;</span><br><span class="line">        @touchmove=&quot;onMove&quot; </span><br><span class="line">        @touchend=&quot;onEnd&quot;&gt;</span><br><span class="line">      &lt;/canvas&gt;</span><br><span class="line">      &lt;div class=&quot;btn-box&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;btn btn-clear&quot; @click=&quot;onClear&quot;&gt;清屏&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;btn btn-generate&quot; @click=&quot;onGenerate&quot;&gt;生成&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;HandWriting&apos;,</span><br><span class="line">  data: function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // 画板坐标</span><br><span class="line">      offsetWidth: 0,</span><br><span class="line">      offsetHeight: 0,</span><br><span class="line">      // 画板宽度</span><br><span class="line">      canvasWidth: &apos;&apos;,</span><br><span class="line">      // 画板高度</span><br><span class="line">      canvasHeight: &apos;&apos;,</span><br><span class="line">      // 线条宽度</span><br><span class="line">      lineWidth: 10,</span><br><span class="line">      // 线条颜色</span><br><span class="line">      lineColor: &apos;#000&apos;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">      this.init()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">      // 画板初始化</span><br><span class="line">      init () &#123;&#125;,</span><br><span class="line">      // 开始触摸</span><br><span class="line">      onStart (e) &#123;&#125;,</span><br><span class="line">      // 移动</span><br><span class="line">      onMove (e) &#123;&#125;,</span><br><span class="line">      // 停止触摸</span><br><span class="line">      onEnd (e) &#123;&#125;,</span><br><span class="line">      // 点击取消</span><br><span class="line">      onClear () &#123;&#125;,</span><br><span class="line">      // 点击确认</span><br><span class="line">      onGenerate () &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot; scoped&gt;</span><br><span class="line">.hand-writing &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.writing-box &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 80%;</span><br><span class="line">    background: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">.btn-box &#123;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 20%;</span><br><span class="line">&#125;</span><br><span class="line">.btn &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  margin: 20px 25px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  border: 1px solid #1890ff;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  background: #1890ff;</span><br><span class="line">  color: #fff;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.btn:active &#123;</span><br><span class="line">  background: #fff;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这样一个架子就搭完了，效果如下图所示。</p><p><img src="https://jacokwu.cn/images/blog/tablets-eg1.png" alt="架子效果图"></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>然后我们开始进入整体，首先需要获取canvas的context对象。在<code>init()</code>方法中添加如下代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">init () &#123;</span><br><span class="line">  <span class="comment">// 获取canvas</span></span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="keyword">this</span>.$refs.writingCanvas</span><br><span class="line">  <span class="comment">// 显式的宽高赋值</span></span><br><span class="line">  <span class="keyword">this</span>.canvasWidth = canvas.offsetWidth</span><br><span class="line">  <span class="keyword">this</span>.canvasHeight = canvas.offsetHeight</span><br><span class="line">  <span class="comment">// 获取context对象</span></span><br><span class="line">  <span class="keyword">this</span>.ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="onStart"><a href="#onStart" class="headerlink" title="onStart"></a>onStart</h4><p>获取到了context对象就可以开始画东西了。在<code>onStart()</code>方法中添加如下代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onStart (e) &#123;</span><br><span class="line">  <span class="comment">// 获取画板相对于屏幕的偏移量，即左上角的坐标</span></span><br><span class="line">  <span class="keyword">this</span>.offsetLeft = e.target.offsetLeft</span><br><span class="line">  <span class="keyword">this</span>.offsetTop = e.target.offsetTop</span><br><span class="line">  <span class="comment">// 获取点击点的坐标（实际坐标 = 点击点相对于屏幕的坐标 - 画板相对于屏幕的坐标）</span></span><br><span class="line">  <span class="keyword">let</span> x = e.touches[<span class="number">0</span>].clientX - <span class="keyword">this</span>.offsetLeft</span><br><span class="line">  <span class="keyword">let</span> y = e.touches[<span class="number">0</span>].clientY - <span class="keyword">this</span>.offsetTop</span><br><span class="line">  <span class="comment">// 开始绘制</span></span><br><span class="line">  <span class="keyword">this</span>.ctx.beginPath()</span><br><span class="line">  <span class="comment">// 设置线条属性</span></span><br><span class="line">  <span class="keyword">this</span>.ctx.lineWidth = <span class="keyword">this</span>.lineWidth</span><br><span class="line">  <span class="keyword">this</span>.ctx.strokeStyle = <span class="keyword">this</span>.lineColor</span><br><span class="line">  <span class="keyword">this</span>.ctx.lineCap = <span class="string">'round'</span></span><br><span class="line">  <span class="keyword">this</span>.ctx.lineJoin = <span class="string">'round'</span></span><br><span class="line">  <span class="comment">// 绘制点击点</span></span><br><span class="line">  <span class="keyword">this</span>.ctx.lineTo(x, y)</span><br><span class="line">  <span class="keyword">this</span>.ctx.stroke()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="onMove"><a href="#onMove" class="headerlink" title="onMove"></a>onMove</h4><p>现在调试这个DEMO，就可以发现已经可以在画板中点击画点了。下面开始让这个点移动起来。在<code>onMove()</code>方法中添加如下代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onMove (e) &#123;</span><br><span class="line">  <span class="comment">// 获取点击点的坐标</span></span><br><span class="line">  <span class="keyword">let</span> x = e.touches[<span class="number">0</span>].clientX - <span class="keyword">this</span>.offsetLeft</span><br><span class="line">  <span class="keyword">let</span> y = e.touches[<span class="number">0</span>].clientY - <span class="keyword">this</span>.offsetTop</span><br><span class="line">  <span class="comment">// 绘制</span></span><br><span class="line">  <span class="keyword">this</span>.ctx.lineTo(x, y)</span><br><span class="line">  <span class="keyword">this</span>.ctx.stroke()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="onEnd"><a href="#onEnd" class="headerlink" title="onEnd"></a>onEnd</h4><p>现在再调试，已经可以正常的画线了，但是有始有终，当我们停止手指触摸时，应该关闭路径绘制。在<code>onEnd()</code>方法中添加如下代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onEnd () &#123;</span><br><span class="line">  <span class="comment">// 停止绘制</span></span><br><span class="line">  <span class="keyword">this</span>.ctx.closePath()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="onClear"><a href="#onClear" class="headerlink" title="onClear"></a>onClear</h4><p>到此画图的部分已经做完了，下面我们来实现清除画板功能和生成图片功能。首先是清除功能。在<code>onClear()</code>方法中添加如下代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onClear () &#123;</span><br><span class="line">  <span class="comment">// 清空画板</span></span><br><span class="line">  <span class="keyword">this</span>.ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.canvasWidth, <span class="keyword">this</span>.canvasHeight)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="onGenerate"><a href="#onGenerate" class="headerlink" title="onGenerate"></a>onGenerate</h4><p>然后来添加生成图片的功能。在<code>onGenerate()</code>方法中添加如下代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onGenerate () &#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = <span class="keyword">this</span>.$refs.writingCanvas.toDataURL()</span><br><span class="line">  <span class="built_in">console</span>.log(filePath)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h4><p>点击生成按钮就可以在控制台看到打印的png类型的图片的base64地址。现在让我们将其显示在屏幕上。修改整体代码如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hand-writing&quot;&gt;</span><br><span class="line">      &lt;img v-if=&quot;filePath&quot; :src=&quot;filePath&quot; alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;canvas </span><br><span class="line">        v-else</span><br><span class="line">        ref=&quot;writingCanvas&quot; </span><br><span class="line">        class=&quot;writing-box&quot; </span><br><span class="line">        :width=&quot;canvasWidth&quot; </span><br><span class="line">        :height=&quot;canvasHeight&quot; </span><br><span class="line">        @touchstart=&quot;onStart&quot;</span><br><span class="line">        @touchmove=&quot;onMove&quot; </span><br><span class="line">        @touchend=&quot;onEnd&quot;&gt;</span><br><span class="line">      &lt;/canvas&gt;</span><br><span class="line">      &lt;div class=&quot;btn-box&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;btn btn-clear&quot; @click=&quot;onClear&quot;&gt;清屏&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;btn btn-generate&quot; @click=&quot;onGenerate&quot;&gt;生成&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;HandWriting&apos;,</span><br><span class="line">  data: function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      ...</span><br><span class="line">      </span><br><span class="line">      // 图片地址</span><br><span class="line">      filePath: &apos;&apos;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">      this.init()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">      </span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      // 点击取消</span><br><span class="line">      onClear () &#123;</span><br><span class="line">        this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)</span><br><span class="line">        this.filePath = &apos;&apos;</span><br><span class="line">        // 清空filePath会造成DOM更新，而DOM更新会有延迟，所以放在nextTick中在DOM更新完后执行</span><br><span class="line">        // 清空filePath会让canvas重新生成，所以需要重新初始化</span><br><span class="line">        this.$nextTick(() =&gt; &#123;</span><br><span class="line">          this.init()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // 点击确认</span><br><span class="line">      onGenerate () &#123;</span><br><span class="line">        // 当生成之后再点击将无效</span><br><span class="line">        this.filePath = this.filePath ? this.filePath : this.$refs.writingCanvas.toDataURL()</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><p>可以看到刚刚写的代码非常冗余，让我们优化一下。可以将所有的绘制提取出来，如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将onStart 和 onMove中的公共代码提取出来</span></span><br><span class="line">handleDraw (e) &#123;</span><br><span class="line">  <span class="comment">// 获取点击点的坐标</span></span><br><span class="line">  <span class="keyword">let</span> x = e.touches[<span class="number">0</span>].clientX - <span class="keyword">this</span>.offsetLeft</span><br><span class="line">  <span class="keyword">let</span> y = e.touches[<span class="number">0</span>].clientY - <span class="keyword">this</span>.offsetTop</span><br><span class="line">  <span class="comment">// 绘制</span></span><br><span class="line">  <span class="keyword">this</span>.ctx.lineTo(x, y)</span><br><span class="line">  <span class="keyword">this</span>.ctx.stroke()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>作为一个插件我们需要提供一些暴露给外部的方法，变量，以及需要接收一些变量，更改如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'HandWriting'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    path: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">      <span class="comment">// 画板初始化</span></span><br><span class="line">      init () &#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.path !== <span class="string">''</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.filePath = <span class="keyword">this</span>.path</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 点击取消</span></span><br><span class="line">      onClear () &#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清除的回调</span></span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'onClear'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 点击确认</span></span><br><span class="line">      onGenerate () &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.filePath) &#123;</span><br><span class="line">          <span class="keyword">this</span>.filePath = <span class="keyword">this</span>.filePath</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.filePath = <span class="keyword">this</span>.$refs.writingCanvas.toDataURL()</span><br><span class="line">          <span class="comment">// 生成图片的回调</span></span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'onComplete'</span>, <span class="keyword">this</span>.filePath)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里props只接收了图片，当然也可以接收canvas的宽度、高度等。方法都一样，就不再赘述。</p><h4 id="在线预览-amp-源码"><a href="#在线预览-amp-源码" class="headerlink" title="在线预览&amp;源码"></a>在线预览&amp;源码</h4><p>预览请打开控制台在手机模式下运行。笔画位置有误差请刷新浏览器。<br><a href="https://jacokwu.cn/vue-demo/vue-demo/dist/#/hand-writing">DEMO</a></p><p>源码：<a href="https://github.com/JaCoxxx/vue-demo/blob/master/vue-demo/src/views/HandWritingBoard/index.vue" target="_blank" rel="noopener">GitHub</a></p><h3 id="功能扩展"><a href="#功能扩展" class="headerlink" title="功能扩展"></a>功能扩展</h3><p>此章节开始所有的ui及样式将使用Ant Design Vue。之前的代码无需更改，并无冲突。</p><h4 id="更改画笔粗细"><a href="#更改画笔粗细" class="headerlink" title="更改画笔粗细"></a>更改画笔粗细</h4><p>更改笔画粗细首先需要一个调节笔画粗细的组件。这里使用了antd的气泡卡片作为调节的容器。使用滑动输入条调节粗细。在文件中添加、更改如下代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hand-writing&quot;&gt;</span><br><span class="line">    &lt;img v-if=&quot;filePath&quot; :src=&quot;filePath&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">    &lt;canvas</span><br><span class="line">      v-else</span><br><span class="line">      ref=&quot;writingCanvas&quot;</span><br><span class="line">      class=&quot;writing-box&quot;</span><br><span class="line">      :width=&quot;canvasWidth&quot;</span><br><span class="line">      :height=&quot;canvasHeight&quot;</span><br><span class="line">      @touchstart=&quot;onStart&quot;</span><br><span class="line">      @touchmove=&quot;onMove&quot;</span><br><span class="line">      @touchend=&quot;onEnd&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/canvas&gt;</span><br><span class="line">    &lt;div class=&quot;btn-box&quot;&gt;</span><br><span class="line">      &lt;!-- 添加开始 --&gt;</span><br><span class="line">      &lt;!-- 调节弹框 --&gt;</span><br><span class="line">      &lt;a-popover v-model=&quot;adjustVisible&quot;&gt;</span><br><span class="line">        &lt;template slot=&quot;title&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;adjust-header&quot;&gt;</span><br><span class="line">            &lt;span&gt;调节笔画&lt;/span&gt;</span><br><span class="line">            &lt;a-icon type=&quot;close-circle&quot; @click=&quot;adjustVisible = false&quot; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template slot=&quot;content&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;adjust-content&quot;&gt;</span><br><span class="line">            &lt;a-row&gt;</span><br><span class="line">              &lt;a-col :span=&quot;4&quot;&gt;线条粗细&lt;/a-col&gt;</span><br><span class="line">              &lt;a-col :span=&quot;12&quot;&gt;</span><br><span class="line">                &lt;a-slider :min=&quot;1&quot; :max=&quot;20&quot; v-model=&quot;lineWidth&quot; /&gt;</span><br><span class="line">              &lt;/a-col&gt;</span><br><span class="line">            &lt;/a-row&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;a-button</span><br><span class="line">          type=&quot;primary&quot;</span><br><span class="line">          class=&quot;btn btn-adjust&quot;</span><br><span class="line">          @click=&quot;adjustVisible = true&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          调节笔画</span><br><span class="line">        &lt;/a-button&gt;</span><br><span class="line">      &lt;/a-popover&gt;</span><br><span class="line">      &lt;!-- 添加结束 --&gt;</span><br><span class="line">      &lt;a-button type=&quot;primary&quot; class=&quot;btn btn-clear&quot; @click=&quot;onClear&quot;</span><br><span class="line">        &gt;清屏&lt;/a-button</span><br><span class="line">      &gt;</span><br><span class="line">      &lt;a-button type=&quot;primary&quot; class=&quot;btn btn-generate&quot; @click=&quot;onGenerate&quot;</span><br><span class="line">        &gt;生成&lt;/a-button</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;HandWriting&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    path: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      // 添加卡片隐藏控制变量</span><br><span class="line">      adjustVisible: false</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">.btn-box &#123;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding-top: 10px;</span><br><span class="line">  height: 20%;</span><br><span class="line">&#125;</span><br><span class="line">.btn &#123;</span><br><span class="line">  margin: 0 15px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  line-height: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.adjust-header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.adjust-header span &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.adjust-header .anticon&#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    text-align: right;</span><br><span class="line">    line-height: 21px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>更改之后，点击调节笔画，就可以在弹框中调节粗细了。</p><h4 id="更改画笔颜色"><a href="#更改画笔颜色" class="headerlink" title="更改画笔颜色"></a>更改画笔颜色</h4><p>这里使用<a href="https://github.com/xiaokaike/vue-color" target="_blank" rel="noopener">vue-color</a>调色板来调节颜色。</p><p>首先安装vue-color。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i vue-color</span><br><span class="line">or</span><br><span class="line">yarn add vue-color</span><br></pre></td></tr></table></figure><p>然后在文件中引入，这里使用的Chrome样式的调色板。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Chrome &#125; <span class="keyword">from</span> <span class="string">'vue-color'</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    pickerColor: &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;</span><br><span class="line">  <span class="string">"chrome-picker"</span>: Chrome</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;chrome-picker v-model=<span class="string">"pickerColor"</span> /&gt;</span><br></pre></td></tr></table></figure><p>直接通过这个插件获取到的值是一个对象，我们需要处理这个对象。添加如下代码，当调色板颜色发生变化时，改变线条颜色。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  pickerColor: <span class="function"><span class="keyword">function</span>(<span class="params">now</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lineColor = now.hex8</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>添加完成之后，就可以开始愉快的画图了，但是画错了怎么办。当然是添加一个橡皮擦了。</p><h4 id="橡皮檫功能"><a href="#橡皮檫功能" class="headerlink" title="橡皮檫功能"></a>橡皮檫功能</h4><h4 id="源码-amp-在线预览"><a href="#源码-amp-在线预览" class="headerlink" title="源码&amp;在线预览"></a>源码&amp;在线预览</h4><p>预览请打开控制台在手机模式下运行。笔画位置有误差请刷新浏览器。<br><a href="https://jacokwu.cn/vue-demo/vue-demo/dist/#/hand-writing2">DEMO</a></p><p>源码：<a href="https://github.com/JaCoxxx/vue-demo/blob/master/vue-demo/src/views/HandWritingBoard2/index.vue" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> canvas </tag>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter开发Bug总结</title>
      <link href="/blog/flutter/cjzjhsmkf001cz0uzotjmr1t4/"/>
      <url>/blog/flutter/cjzjhsmkf001cz0uzotjmr1t4/</url>
      
        <content type="html"><![CDATA[<p>本篇文章总结一下在Flutter开发过程中遇到的BUG及其解决方案，不定期更新。</p><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><ul><li>系统：Windows 10 家庭中文版</li><li>编译器：VS code</li><li>Android版本：Android8.1.0</li><li>Android SDK Tools: 26.1.1</li></ul><h3 id="flutter-RangeError-index-Invalid-value-Valid-value-range-is-empty-0"><a href="#flutter-RangeError-index-Invalid-value-Valid-value-range-is-empty-0" class="headerlink" title="flutter RangeError (index): Invalid value: Valid value range is empty: 0"></a>flutter RangeError (index): Invalid value: Valid value range is empty: 0</h3><ul><li><p>问题描述：在页面类中定义了一个List，然后在 initState() 中通过 add() 对其赋值，没有语法错误，但是在运行过程中报错。</p></li><li><p>代码详情：</p></li></ul><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_RootPage</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RootPage</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">int</span> _currentIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; pages = <span class="built_in">List</span>();</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    pages</span><br><span class="line">    ..add(HomePage())</span><br><span class="line">    ..add(ShopPage());</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// print(pages[0]);</span></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: pages[_currentIndex],</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>错误详情：看报错是因为List中没有值，然后使用的时候就会出现引用错误。</li></ul><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">I/flutter ( <span class="number">3569</span>): ══╡ EXCEPTION CAUGHT BY WIDGETS LIBRARY ╞═══════════════════════════════════════════════════════════</span><br><span class="line">I/flutter ( <span class="number">3569</span>): The following RangeError was thrown building BottomAppBarNav(dirty, state:</span><br><span class="line">I/flutter ( <span class="number">3569</span>): BottomAppBArNavState#<span class="number">0</span>f3a1):</span><br><span class="line">I/flutter ( <span class="number">3569</span>): RangeError (index): Invalid value: Valid value range <span class="keyword">is</span> empty: <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><p>解决方案：在项目根目录运行此命令：<code>flutter clean</code>，然后再次运行项目，正常运行。</p></li><li><p>答案来源：<a href="https://github.com/flutter/flutter/issues/17831#issuecomment-391808736" target="_blank" rel="noopener">GITHUB</a></p></li><li><p>问题扩展：依据此issues，如果出现错误<code>RangeError: RangeError (index): Invalid value: Only valid value is 0: 1</code>，一样可以用此方法解决。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUG </tag>
            
            <tag> FLutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站与工具收藏</title>
      <link href="/blog/%E9%9A%8F%E7%AC%94/cjzjhsmkj001fz0uzzh94wdmj/"/>
      <url>/blog/%E9%9A%8F%E7%AC%94/cjzjhsmkj001fz0uzzh94wdmj/</url>
      
        <content type="html"><![CDATA[<p>平时工作、学习中收藏的一些比较好用的资源，做一个分类整理，方便使用。<br>谷歌扩展在每一类中的最后一个小类中展示，不再特别分类。</p><h2 id="搜索-amp-分享-amp-社区"><a href="#搜索-amp-分享-amp-社区" class="headerlink" title="搜索&amp;分享&amp;社区"></a>搜索&amp;分享&amp;社区</h2><ul><li><a href="https://search.chongbuluo.com/" target="_blank" rel="noopener">虫部落</a></li></ul><p>虫部落是一个将搜索和社区整合到一起的一个网站吧，在这里你可以通过快搜搜索图片、音乐、资源、学术文章、数据、电子书等等你能想到的大部分东西；你还可以在虫部落的社区分享自己的技能、知识，查看别人的分享。<br>注册需要答题，相对有点难度，但是只要用心就一定可以做出来。不过不注册也可以，不登录也可以查看大部分内容。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><h4 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h4><ul><li><a href="https://imweb.io/" target="_blank" rel="noopener">Web前端 腾讯IMWeb 团队社区</a></li></ul><p>一个前端学习社区，目前搜搜引擎好像搜索不到论文内的文章？</p><ul><li><a href="https://stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a></li></ul><p>这个就不用多说了吧。</p><ul><li><a href="https://segmentfault.com" target="_blank" rel="noopener">思否</a></li></ul><p>可以提问可以发文章的地方。</p><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><ul><li><a href="https://www.zhangxinxu.com" target="_blank" rel="noopener">张鑫旭</a></li></ul><p>目前只存了这一个大佬的博客</p><h4 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h4><ul><li><a href="https://ustbhuangyi.github.io/vue-analysis/prepare/" target="_blank" rel="noopener">Vue.js 技术揭秘</a></li></ul><p>深入了解Vue</p><h4 id="云"><a href="#云" class="headerlink" title="云"></a>云</h4><p>这个名字起的真的是。。。</p><ul><li><a href="https://console.firebase.google.com/" target="_blank" rel="noopener">firebase</a></li></ul><p>谷歌出品的一个网络数据库，存储的是JSON格式的，方便前端调试，需要科学上网才能使用。</p><ul><li><a href="https://www.wilddog.com/" target="_blank" rel="noopener">野狗云</a></li></ul><p>提供数据存储、智能短信、音视频通讯等服务，但是之前好像融资不成功，偶尔会有问题。</p><ul><li><a href="https://jsonplaceholder.typicode.com/" target="_blank" rel="noopener">JSONPlaceholder</a></li></ul><p>提供返回JSON格式数据的接口，类型很多，平时调试很方便。</p><ul><li><a href="https://www.juhe.cn/" target="_blank" rel="noopener">聚合数据</a></li></ul><p>提供数据接口，接口类型非常多，而且还有提供免费试用的接口，以及后端的API模板。甚至还有返回冷笑话的接口。</p><ul><li><a href="https://dashboard.heroku.com/apps" target="_blank" rel="noopener">Heroku</a></li></ul><p>免费的云服务器，可以上传5个应用，但是需要科学上网，不然太慢了。替代品：GitHub。</p><h4 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h4><ul><li><a href="https://book.flutterchina.club/" target="_blank" rel="noopener">Flutter 实战</a></li></ul><p>学习Flutter必备</p><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><ul><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></li></ul><p>神器呀，有木有。</p><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><ul><li><a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">React 小书</a></li></ul><p>配备了一个小DEMO，适合初学者。写的不错。</p><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><ul><li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="noopener">Node.js 包教不包会</a></li></ul><p>对初学者不太友好，还没有写完，看了一部分，还不错。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><a href="https://docschina.org/" target="_blank" rel="noopener">印记中文</a></li></ul><p>对前端知识的网站的一个整理。</p><ul><li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="noopener">awesome</a></li></ul><p>对所有知识的一个整理，不局限于前端。</p><ul><li><a href="https://color.adobe.com/zh/create/color-wheel/" target="_blank" rel="noopener">色轮</a></li></ul><p>在线调配颜色，非常方便。</p><h4 id="谷歌扩展"><a href="#谷歌扩展" class="headerlink" title="谷歌扩展"></a>谷歌扩展</h4><ul><li>Google 翻译</li></ul><p>看英文文档必备</p><ul><li>React Developer Tools</li></ul><p>React调试工具</p><ul><li>Redux DevTools</li></ul><p>Redux调试工具</p><ul><li>Vue.js devtools</li></ul><p>Vue调试工具</p><ul><li>WEB前端助手(FeHelper)</li></ul><p>Awesome，All In One的一个工具，包含多个独立小应用，比如：Json工具、代码美化工具、代码压缩、二维码工具、markdown工具、网页油猴工具、便签笔记工具、信息加密与解密、随机密码生成、Crontab等等。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h3><p>做毕业设计的时候存了好多转换的网站。。。之前是啥效果已经忘了，有空了筛选一下。</p><ul><li><a href="https://www.docspal.com/" target="_blank" rel="noopener">Online File Converter</a></li></ul><p>国外网站，可以转常见的格式文件</p><ul><li><a href="https://www.hipdf.com/" target="_blank" rel="noopener">Hipdf</a></li></ul><p>国外网站，主要是针对PDF的转换，需要注册后使用。</p><ul><li><a href="https://ocr.abbyy.cn/" target="_blank" rel="noopener">泰比</a></li></ul><p>ABBYY提供免费的在线OCR服务，让你转换扫描和拍摄图像、PDF文档到Word。<br>需要提供邮箱。网站很丑。。</p><ul><li><a href="http://www.pdfdo.com/pdf-to-word.aspx" target="_blank" rel="noopener">PDF转换器</a></li></ul><p>可以转换PDF和图片。</p><ul><li><a href="https://www.ilovepdf.com/zh-cn" target="_blank" rel="noopener">iLovePDF</a></li></ul><p>完全免费的PDF文件在线管理工具，无需安装。</p><ul><li><a href="https://www.onlineocr.net/" target="_blank" rel="noopener">Free Online OCR</a></li></ul><p>英文网站，界面很简单。</p><ul><li><a href="https://smallpdf.com/cn/unlock-pdf" target="_blank" rel="noopener">PDF解密</a></li></ul><p>可以试用7天。</p><ul><li><a href="http://www.docpe.com/" target="_blank" rel="noopener">档铺</a></li></ul><p>提供Word、Excel、PPT、PDF、图片、HTML转换，工作的时候用的Excel转HTML，效果不错，就是代码量太大了。。。</p><h3 id="BT"><a href="#BT" class="headerlink" title="BT"></a>BT</h3><p>BT网站只提供网站，不想介绍了。。</p><ul><li><p><a href="https://www.torrentkitty.tv/search/" target="_blank" rel="noopener">Torrent Kitty</a></p></li><li><p><a href="https://zooqle.com" target="_blank" rel="noopener">Zooqle</a></p></li><li><p><a href="https://btsow.pw/tags" target="_blank" rel="noopener">BTSOW</a></p></li><li><p><a href="btkitty.pet">BT Kitty</a></p></li><li><p><a href="https://www.868888.net" target="_blank" rel="noopener">申博</a></p></li><li><p><a href="https://www.69m.xyz" target="_blank" rel="noopener">69MAG</a></p></li><li><p><a href="btlibrary.co">P2P种子</a></p></li><li><p><a href="https://www.cilimao.cc" target="_blank" rel="noopener">磁力猫</a></p></li><li><p><a href="www.minibt.com">MiniBT</a></p></li><li><p><a href="www.btbit.fun/index.html">Btbit</a></p></li><li><p><a href="https://eztv.io" target="_blank" rel="noopener">EZTV</a></p></li></ul><h3 id="其他-这里有好东西哦"><a href="#其他-这里有好东西哦" class="headerlink" title="其他 - 这里有好东西哦"></a>其他 - 这里有好东西哦</h3><ul><li><a href="http://www.atool9.com/" target="_blank" rel="noopener">在线工具</a></li></ul><p>小工具还是挺多的，也没有广告。</p><ul><li><a href="https://www.processon.com/" target="_blank" rel="noopener">ProcessOn</a></li></ul><p>在线Visio，帮我解决了很多问题，就是只能存9张图。</p><ul><li><a href="http://www.dayanzai.me/" target="_blank" rel="noopener">大眼仔</a></li></ul><p>提供软件下载。广告较少，无辣眼广告。</p><ul><li><a href="http://www.sdifen.com/" target="_blank" rel="noopener">史蒂芬周的博客</a></li></ul><p>提供软件下载。广告较少，无辣眼广告。</p><ul><li><a href="https://hoodiearon.github.io/fq-book/#/" target="_blank" rel="noopener">这本书能让你连接互联网 Ⅱ</a></li></ul><p>看书名就知道了吧。</p><ul><li><a href="https://github.com/hoodiearon/WebSiteOutlook" target="_blank" rel="noopener">WebSiteOutlook</a></li></ul><p>冲出你的窗口。上本书的仓库，对知识的整合。</p><ul><li><a href="https://stool.cf/" target="_blank" rel="noopener">阅后即焚</a></li></ul><p>将一段话生成一个网址，看完即删除。</p><ul><li><a href="https://www.pdflibr.com/" target="_blank" rel="noopener">云短信</a></li></ul><p>提供手机号用以注册网站，很方便。</p><ul><li><a href="http://24mail.chacuo.net/" target="_blank" rel="noopener">临时邮箱</a></li></ul><p>提供邮箱账号用以注册网站，很方便。</p><ul><li><a href="http://chromecj.com/" target="_blank" rel="noopener">Chrome插件</a></li></ul><p>对谷歌插件的整合。</p><h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>（未完待续）</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[原]JS原生数组方法的用法及其实现（二）</title>
      <link href="/blog/js/cjzjhsmk40014z0uzfoiy0qx3/"/>
      <url>/blog/js/cjzjhsmk40014z0uzfoiy0qx3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文原载于<a href="https://blog.csdn.net/jacoox/article/details/88805641" target="_blank" rel="noopener">CSDN</a></p></blockquote><p>（接上一篇，过去了好几个月了，突然想到这里还留了一个坑。。。）</p><h3 id="九、entries"><a href="#九、entries" class="headerlink" title="九、entries()"></a>九、entries()</h3><blockquote><p><code>entries()</code> 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。</p></blockquote><p>entries()函数返回的是一个数组的迭代对象，与Generator 函数（可以参考阮一峰大叔写的ES6入门中的介绍<a href="http://es6.ruanyifeng.com/#docs/generator" target="_blank" rel="noopener">Generator 函数</a>）的返回结果是一样的，所以直接通过 <code>.next()</code>依次得到结果，其中。如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> ent = arr.entries()</span><br><span class="line"><span class="built_in">console</span>.log(ent.next()) <span class="comment">// &#123;value: Array(2), done: false&#125;</span></span><br><span class="line"><span class="comment">// 其中，value是一个数组，为 [0, 1]，分别代表下标，以及下标对应的值</span></span><br><span class="line"><span class="comment">// done 是一个Boolean类型的值，代表遍历是否以经结束</span></span><br><span class="line"><span class="built_in">console</span>.log(ent.next()) <span class="comment">// &#123;value: Array(2), done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(ent.next()) <span class="comment">// &#123;value: Array(2), done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(ent.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="comment">// 遍历结束，done值变为true</span></span><br></pre></td></tr></table></figure><p>实现方法的核心就是<code>Generator 函数</code>。利用其的特性来完成数组的迭代。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myEntries = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// function* () 是Generator函数的定义方式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> <span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="comment">// 遍历数组，返回一个包含下标和对应值的数组</span></span><br><span class="line"><span class="keyword">yield</span> [key - <span class="number">1</span>, <span class="keyword">this</span>[key - <span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十、find"><a href="#十、find" class="headerlink" title="十、find()"></a>十、find()</h3><blockquote><p><code>find()</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p></blockquote><p><code>find()</code>类似于<code>some()</code>，不同的是，<code>some()</code>是判断目标数组中是否含有满足条件的值，返回一个<code>Boolean</code>类型的值，而<code>find()</code>是找到目标数组中满足条件的第一个值，并返回该值。使用方法如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.find(<span class="function"><span class="params">ele</span> =&gt;</span> ele &gt; <span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// =&gt; es6箭头函数</span></span><br><span class="line">arr.find(<span class="function"><span class="params">ele</span> =&gt;</span> ele &gt; <span class="number">5</span>) <span class="comment">// undefined</span></span><br><span class="line">arr.find(<span class="function"><span class="params">ele</span> =&gt;</span> ele &gt; <span class="number">5</span>) <span class="comment">// Uncaught TypeError: undefined is not a function</span></span><br><span class="line"><span class="comment">// find()中的参数函数依旧接收三个参数，分别为 value, index, arr</span></span><br></pre></td></tr></table></figure><p>可见，<code>find()</code>依旧是通过遍历来查找符合条件的值，实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFind = <span class="function"><span class="keyword">function</span>(<span class="params">fn, callback</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> len = <span class="keyword">this</span>.length</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> fn === <span class="string">'function'</span>) &#123;</span><br><span class="line"><span class="comment">// 参数必须类型为函数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(fn.call(callback, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>)) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;fn&#125;</span> is not a funciton`</span>)</span><br><span class="line"><span class="comment">// 抛出一个错误</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十一、findIndex"><a href="#十一、findIndex" class="headerlink" title="十一、findIndex()"></a>十一、findIndex()</h3><blockquote><p><code>findIndex()</code>方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。</p></blockquote><p><code>findIndex()</code>与<code>find()</code>唯一的区别就是一个返回元素本身，一个返回索引。使用方法如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.findIndex(<span class="function"><span class="params">ele</span> =&gt;</span> ele &gt; <span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line">arr.findIndex(<span class="function"><span class="params">ele</span> =&gt;</span> ele &gt; <span class="number">3</span>) <span class="comment">// -1</span></span><br><span class="line">arr.findIndex() <span class="comment">// Uncaught TypeError: undefined is not a function</span></span><br><span class="line"><span class="comment">// findIndex()中的参数函数依旧接收三个参数，分别为 value, index, arr</span></span><br></pre></td></tr></table></figure><p>实现方法与<code>find()</code>的实现也是仅有一点差别，如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFindIndex = <span class="function"><span class="keyword">function</span>(<span class="params">fn, callback</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> len = <span class="keyword">this</span>.length</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> fn === <span class="string">'function'</span>) &#123;</span><br><span class="line"><span class="comment">// 参数必须类型为函数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(fn.call(callback, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>)) &#123;</span><br><span class="line">     <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;fn&#125;</span> is not a funciton`</span>)</span><br><span class="line"><span class="comment">// 抛出一个错误</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"><span class="comment">// 没有查找到符合条件的，返回-1，find()的实现中没写，默认返回 undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十二、flat"><a href="#十二、flat" class="headerlink" title="十二、flat()"></a>十二、flat()</h3><blockquote><p><code>flat()</code> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p></blockquote><p>刚看到的时候一脸懵逼，啥时候居然有这么厉害的方法了。。。<br><code>flat()</code>照我的理解就是将一个多维数组转换为低维数组，以及去掉其中的空项，同时，此方法不会改变原数组。使用如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// flat 接收一个参数，默认参数值为 1</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>]]]]</span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, , <span class="number">3</span>, <span class="number">4</span>, <span class="literal">undefined</span>, <span class="literal">null</span>] <span class="comment">// 稀疏数组</span></span><br><span class="line">arr1.flat() <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">arr2.flat() <span class="comment">// [1, 2, 3, [4, 5, [6, 7]]]</span></span><br><span class="line"><span class="comment">// 采用默认值 1，只提取了一层的多维数组，让维度从4变为3</span></span><br><span class="line">arr2.flat(<span class="number">3</span>) <span class="comment">// [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line">arr3.flat() <span class="comment">// [1, 3, 4, undefined, null]</span></span><br><span class="line"><span class="comment">// 只去掉了空项，而不管值是否为 undefined，或 null</span></span><br></pre></td></tr></table></figure><p>实现的话，二维降一维很简单，通过解构就可以实现，那么多维降维，就需要多次解构，但是这个次数是不一定的，所以可以通过递归实现。实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFlat = <span class="function"><span class="keyword">function</span>(<span class="params">src = <span class="number">1</span>, callback</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> newArr = [], <span class="comment">// 存放生成的新数组</span></span><br><span class="line">oArr = [] <span class="comment">// 临时数组</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> src === <span class="string">'number'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (src === <span class="number">1</span>) &#123;</span><br><span class="line">oArr = [].concat(...this)</span><br><span class="line"><span class="comment">// 通过解构对数组降维，每次降一维</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">oArr = [].concat(...this.myFlat(src - <span class="number">1</span>))</span><br><span class="line"><span class="comment">// 递归降维</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;src&#125;</span> is not a number.`</span>)</span><br><span class="line">&#125;</span><br><span class="line">oArr.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> newArr.push(ele))</span><br><span class="line"><span class="comment">// 通过forEach去掉空项，map也可以实现</span></span><br><span class="line"><span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上有个缺陷，就是对输入的过大的参数没有处理。</p><h3 id="十三、includes"><a href="#十三、includes" class="headerlink" title="十三、includes()"></a>十三、includes()</h3><blockquote><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</p></blockquote><p>看到这个方法就想到了<code>some()</code>，二者有异曲同工之妙，<code>some()</code>是判断指定数组是否有元素符合条件，而<code>includes()</code>则将这个条件直接限制为了一个具体的值。使用方法如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// includes 接收两个参数，第一个是要查找的值 src，第二个是开始查找的索引 index</span></span><br><span class="line"><span class="comment">// 如果第二个参数即索引为正，则从该索引处开始查找</span></span><br><span class="line"><span class="comment">// 如果第二个参数即索引为负，则从 arr.length + index 处开始查找</span></span><br><span class="line"><span class="comment">// 第二个参数的默认值为 0</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">arr.includes(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">arr.includes(<span class="number">2</span>, <span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line">arr.includes(<span class="number">2</span>, <span class="number">-1</span>) <span class="comment">// false</span></span><br><span class="line">arr.includes()  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>实现方法类似于<code>some()</code>的实现，不再赘述，直接开始：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myIncludes = <span class="function"><span class="keyword">function</span> (<span class="params">src, index = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> flag = <span class="literal">false</span>, <span class="comment">// 返回值，默认返回 false</span></span><br><span class="line">len = <span class="keyword">this</span>.length</span><br><span class="line">index = index &gt;= <span class="number">0</span> ? index : len + index <span class="comment">// 判断索引</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = index; i &lt; len; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>[i] === src) &#123; </span><br><span class="line">flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十四丶indexOf"><a href="#十四丶indexOf" class="headerlink" title="十四丶indexOf"></a>十四丶indexOf</h3><blockquote><p><code>indexOf()</code>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p></blockquote><p>（未完待续）</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arrays </tag>
            
            <tag> es6 </tag>
            
            <tag> 原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[原]JS原生数组方法的用法及其实现</title>
      <link href="/blog/js/cjzjhsmjn0010z0uz2c7v7yfz/"/>
      <url>/blog/js/cjzjhsmjn0010z0uz2c7v7yfz/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文原载于<a href="https://blog.csdn.net/jacoox/article/details/82693994" target="_blank" rel="noopener">CSDN</a></p></blockquote><p>此文章将会介绍数组大部分的原生方法的用法，并自己实现一个具有相同功能的方法，不定期更新。顺序暂时看起来比较乱，所有方法都写完后会重新整理一下。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>JS原生数组方法的参数都大致符合下面的通式（针对不同的参数，会在遇到之后补充），比较常见的方法一大部分都是遍历一遍数组，然后给每个元素执行一次提供的函数，也就是回调函数，所以实现基本都是基于遍历的。其他的，会在后面详细说明。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.method( <span class="function"><span class="keyword">function</span> (<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// value : 必选，当前元素</span></span><br><span class="line">    <span class="comment">// index : 可选，当前元素索引值</span></span><br><span class="line">    <span class="comment">// arr : 可选，当前数组</span></span><br><span class="line">    <span class="comment">// thisValue : 可选，替换当前的this指向</span></span><br><span class="line">&#125;, thisValue)</span><br></pre></td></tr></table></figure><p>大致将数组方法分为两类，一类是改变原数组的方法，一类是不改变原数组的方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 改变原数组</span></span><br><span class="line">arr.push();</span><br><span class="line">arr.pop();</span><br><span class="line">arr.unshift();</span><br><span class="line">arr.shift();</span><br><span class="line">arr.reverse();</span><br><span class="line">arr.solice();</span><br><span class="line">arr.sort();</span><br><span class="line">arr.copyWithin();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 不改变原数组</span></span><br><span class="line">arr.concat();</span><br><span class="line">arr.toString();</span><br><span class="line">arr.slice();</span><br><span class="line">arr.join();</span><br><span class="line">arr.split();</span><br><span class="line">arr.forEach();</span><br><span class="line">arr.map();</span><br><span class="line">arr.filter();</span><br><span class="line">arr.some();</span><br><span class="line">arr.every();</span><br><span class="line">arr.concat();</span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><blockquote><p><code>forEach()</code> 方法用于调用数组的每个元素，并将元素传递给回调函数。</p></blockquote><p><code>forEach()</code> 没有什么好说的，就是遍历数组的所有元素，需要注意的就是此方法不会改变原数组。使用方法如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">val, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>实现起来也很简单，就是遍历一次数组，然后给每个元素都执行一次回调函数，直接上实现代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myForEach = <span class="function"><span class="keyword">function</span> (<span class="params">fn, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">'function'</span>) &#123; <span class="comment">// 第一个参数必须是函数才能执行，否则报错</span></span><br><span class="line">        <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i ++) &#123;</span><br><span class="line">            fn.call(callback, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>) <span class="comment">// 将this绑定到回调函数之上，并传入参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中，</span></span><br><span class="line"><span class="comment">// fn : 回调函数</span></span><br><span class="line"><span class="comment">// callback : this指向</span></span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><blockquote><p><code>map()</code> 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p></blockquote><p><code>map()</code> 就相当于是在 <code>forEach()</code> 方法上的扩展，遍历所有元素并以相同的规则改变元素后返回一个新数组。用法如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">val, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val * index</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr) <span class="comment">// [0, 2, 6, 12]</span></span><br></pre></td></tr></table></figure><p><code>map()</code> 就是加强版的 <code>forEach()</code> ，所以实现方法大致相同，只是多了一个返回新数组，实现如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myMap = <span class="function"><span class="keyword">function</span>(<span class="params">fn, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [] <span class="comment">// 与 forEach() 的区别所在，返回一个新数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i ++) &#123;</span><br><span class="line">        arr.push(fn.call(callback, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><blockquote><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p></blockquote><p>filter 过滤，透过；顾名思义，<code>filter()</code> 就是过滤元素的方法，返回一个由过滤的元素组成的新数组。用法如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">val, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (val % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr) <span class="comment">// [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><p><code>filter()</code> 方法实现的重点就在于理解 return 返回值的真假决定了正在遍历的该元素是否加入新数组。在实现过程中用到了<code>push()</code>方法，此方法会在后面详细介绍。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFilter = <span class="function"><span class="keyword">function</span> (<span class="params">fn, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = []</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>, length3 = <span class="keyword">this</span>.length; k &lt; length3; k++)&#123;</span><br><span class="line">            <span class="comment">// 回调函数的返回值必定是一个 boolean 类型的</span></span><br><span class="line">            <span class="comment">// 所以可以直接利用 ‘&amp;&amp;’ 来判断当返回值为真的时候，将此元素加入到新数组之中   </span></span><br><span class="line">            fn.call(callback, <span class="keyword">this</span>[k], k, <span class="keyword">this</span>) &amp;&amp; arr.push(<span class="keyword">this</span>[k])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><blockquote><p><code>some()</code> 方法用于检测数组中的元素是否满足指定条件（函数提供）。</p></blockquote><p>some 一些。<code>some()</code> 就是当数组中只要有一个元素符合条件就返回真。用法如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">var</span> flag = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">val, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val === <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(flag) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>some()</code> 看起来用法和上面的几种差不多，实现起来自然也不会有太大差别，仅仅是多了一层 if 判断，判断是否符合条件，实现如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySome = <span class="function"><span class="keyword">function</span> (<span class="params">fn, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这个不知道该称为什么点的一个点是用来设定当数组中有符合条件的值就是返回真</span></span><br><span class="line">    <span class="comment">// 并同时跳出循环，因为 some 只需要有至少一个满足就可以了</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>, length2 = <span class="keyword">this</span>.length; j &lt; length2; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123; <span class="keyword">break</span> &#125;</span><br><span class="line">            <span class="comment">// 这句是为了严谨起见</span></span><br><span class="line">            <span class="comment">// 虽然本身就已经是一个 boolean 值了，但是还是要加 !! 来强转一下</span></span><br><span class="line">            flag = !! fn.call(callback, <span class="keyword">this</span>[j], j, <span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><blockquote><p><code>every()</code> 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。</p></blockquote><p>every 所以。说到some，自然离不开every。every就是判断数组中是否所有的元素都满足条件，一旦有一个不满足就返回 false，用法如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> flag = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">val ,index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val &gt; <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(flag) <span class="comment">// false</span></span><br><span class="line"> every() 与 some() 的实现方法相似，只有在真假的判断上有些许区别，不多说，直接看代码</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.myEvery = <span class="function"><span class="keyword">function</span> (<span class="params">fn, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// every 的设定就和 some 的完全相反了，some 是要至少一个，</span></span><br><span class="line">    <span class="comment">// every 是要全部满足，所以一旦有一个不满足就跳出循环并返回 false</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>, length2 = <span class="keyword">this</span>.length; j &lt; length2; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (flag === <span class="literal">false</span>) &#123; <span class="keyword">break</span> &#125;</span><br><span class="line">            flag = !!fn.call(callback, <span class="keyword">this</span>[j], j, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h3><blockquote><p><code>copyWithin()</code> 方法用于从数组的指定位置拷贝元素到数组的另一个指定位置中。</p></blockquote><p>copyWithin 看名字组成，就是数组内部的拷贝，相当于选择其中的一部分元素复制，粘贴到另一部分去，这就是一个用法不同于上面所说的通式的方法了。值得注意的地方是，此方法会改变原数组的元素，但不改变其大小。他的参数列表及用法如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数列表</span></span><br><span class="line">arr.copyWithin(target, start, end)</span><br><span class="line"><span class="comment">// target : 必选，复制到指定位置的索引值</span></span><br><span class="line"><span class="comment">// start : 可选，元素复制的起始索引，缺失则从 0 开始</span></span><br><span class="line"><span class="comment">// end : 可选，元素复制的结束索引，默认值是 arr.length，可取负值，表示倒数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">3</span>)) <span class="comment">// (7)[1, 2, 3, 1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">3</span>, <span class="number">1</span>)) <span class="comment">// (7)[1, 2, 3, 2, 3, 1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>)) <span class="comment">// (7)[1, 2, 3, 3, 2, 3, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>)) <span class="comment">// (7)[1, 2, 3, 2, 3, 2, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">3</span>, <span class="number">4</span>, <span class="number">-2</span>)) <span class="comment">// (7)[1, 2, 3, 3, 3, 2, 2]</span></span><br></pre></td></tr></table></figure><p>第一次看到这个，肯定是看的头大吧， 不过没关系，接下来一步一步剖析整个过程</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment">// 在这里我们定义 clArr 为要复制的数组片段</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">3</span>)) <span class="comment">// (7)[1, 2, 3, 1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start, end 均取默认值，即 0, 7</span></span><br><span class="line"><span class="comment">// 所以 clArr = arr = [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"><span class="comment">// target = 3, 即从 arr[3] 开始复制,同时还要保证 arr 的大小不发生改变</span></span><br><span class="line"><span class="comment">// 所以复制后数组为 [1, 2, 3, 1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// 当复制到数组最后一位时直接停止</span></span><br><span class="line"><span class="comment">// 从这里我们可以看出，重点就是找到clArr，只要找到clArr，一切都就迎刃而解</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">3</span>, <span class="number">1</span>)) <span class="comment">// (7)[1, 2, 3, 2, 3, 1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为copyWithin会改变原数组，所以此时的 arr = [1, 2, 3, 1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// start = 1, end = 7</span></span><br><span class="line"><span class="comment">// clArr = [2, 3, 1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// 可以看到 clArr.length = end - start</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>)) <span class="comment">// (7)[1, 2, 3, 3, 2, 3, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr = [1, 2, 3, 2, 3, 1, 2]</span></span><br><span class="line"><span class="comment">// start = 2, end = 5</span></span><br><span class="line"><span class="comment">// clArr = [3, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>)) <span class="comment">// (7)[1, 2, 3, 2, 3, 2, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr = [1, 2, 3, 3, 2, 3, 2]</span></span><br><span class="line"><span class="comment">// start = 4, end = 8</span></span><br><span class="line"><span class="comment">// clArr = [2, 3, 2]</span></span><br><span class="line"><span class="comment">// 可以看到虽然理论上 clArr.length = 4，但是由于start + clArr.length </span></span><br><span class="line"><span class="comment">// 已经超出原数组的长度，所以 clArr.length 会自动以原数组长度为准</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">3</span>, <span class="number">4</span>, <span class="number">-2</span>)) <span class="comment">// (7)[1, 2, 3, 3, 3, 2, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr = [1, 2, 3, 2, 3, 2, 2]</span></span><br><span class="line"><span class="comment">// 由定义我们知道负值就是倒数，所以我们首先将其转换成整数</span></span><br><span class="line"><span class="comment">// 即 end = arr.length + end = 5</span></span><br><span class="line"><span class="comment">// start = 4, end = 5</span></span><br><span class="line"><span class="comment">// clArr = [3]</span></span><br></pre></td></tr></table></figure><p>看到这里相信你已经看懂了吧，会用了，下一步就是自己实现了，上面的过程基本也介绍了整个过程，就是首先确定 start 与 end ，然后根据二者的值确定要复制的数组片段，再根据 target 确定从何处开始复制。下面就是自己的实现</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myCopyWithin = <span class="function"><span class="keyword">function</span>(<span class="params">target, start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">this</span>, len = <span class="keyword">this</span>.length</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若传入了值就用传入的值，未传入就是用默认值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> start = start || <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> end = end || len</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里的实现与上面略有不同，这里首先判断 end 的值</span></span><br><span class="line">    <span class="comment">// 如果大于数组长度就给end 赋值数组长度，小于0，则取正序值</span></span><br><span class="line"></span><br><span class="line">    end = end &gt; len ? len : (end &lt; <span class="number">0</span> ? len + end : end)</span><br><span class="line">    <span class="keyword">var</span> clArr = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// index 是辅助索引值，len2 是 clArr 的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> index = start, len2 = end - start</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历原数组，确定 clArr</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len2; i ++) &#123;</span><br><span class="line">        clArr[i] = <span class="keyword">this</span>[index]</span><br><span class="line">        index ++</span><br><span class="line">    &#125;</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// len3 是遍历复制的结尾索引，加判断是防止 len3 大于原数组长度导致出错</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> len3 = target + len2</span><br><span class="line">    len3 = len3 &gt; len ? len : len3</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历 clArr，将clArr复制到原数组指定位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> j = target; j &lt; len3; j ++) &#123;</span><br><span class="line">        arr[j] = clArr[index]</span><br><span class="line">        index ++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回原数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h3><blockquote><p><code>fill()</code> 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</p></blockquote><p>fill 填充，一个和 <code>copyWithin()</code> 类似的方法，因为他们都是往数组里面填充一个片段，不同的是一个填充的是本来的数组的内容，一个填充的是一个固定值。其参数列表与用法如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数列表</span></span><br><span class="line"></span><br><span class="line">arr.fill(val, start, end)</span><br><span class="line"><span class="comment">// val : 必选，用来填充数组元素的值</span></span><br><span class="line"><span class="comment">// start : 可选，起始索引，默认值为0</span></span><br><span class="line"><span class="comment">// end : 可选，结束索引，默认值为arr.length</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.fill(<span class="number">5</span>, <span class="number">0</span>, <span class="number">3</span>)) <span class="comment">// (7) [5, 5, 5, 4, 5, 6, 7]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.fill(<span class="number">3</span>, <span class="number">5</span>)) <span class="comment">// (7) [5, 5, 5, 4, 5, 3, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.fill(<span class="number">6</span>)) <span class="comment">// (7) [6, 6, 6, 6, 6, 6, 6]</span></span><br></pre></td></tr></table></figure><p>用法看起来也是一目了然，实现起来也是很容易，实现如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> val = <span class="built_in">arguments</span>[<span class="number">0</span>], start = <span class="built_in">arguments</span>[<span class="number">1</span>] || <span class="number">0</span>, end = <span class="built_in">arguments</span>[<span class="number">2</span>] || arr.length</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = start; i &lt; end; i ++) &#123;</span><br><span class="line">        arr[i] = val</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><blockquote><p><code>concat()</code> 方法用于连接两个或多个数组。</p></blockquote><p>concat 合并多个数组，就是将传入的多个数组按顺序连接在目标数组后面，并且返回新数组 ，参数列表及用法如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数列表</span></span><br><span class="line">arr.concat(arr1, arr2, ...arrN)</span><br><span class="line"><span class="comment">// arr1, arr2, ... arrN : 必选，该参数可以是具体的值，也可以是数组对象。可以是任意多个。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">7</span></span><br><span class="line"><span class="keyword">var</span> newArr1 = arr1.concat(arr2, arr3)</span><br><span class="line"><span class="keyword">var</span> newArr2 = arr1.concat(arr2)</span><br><span class="line"><span class="keyword">var</span> newArr3 = arr1.concat(num1)</span><br><span class="line"><span class="built_in">console</span>.log(newArr1) <span class="comment">// [1, 2, 3, 4, 2, 3, 4, 5, 3, 4, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr2) <span class="comment">// [1, 2, 3, 4, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr3) <span class="comment">// [1, 2, 3, 4, 7]</span></span><br></pre></td></tr></table></figure><p>此方法就是首先复制一个原数组的副本，然后将要连接的数组（数值）都拼接到后面，实现起来也很简单</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myConcat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 得到形参列表的长度，判断需要几次循环来拼接</span></span><br><span class="line">    <span class="keyword">var</span> len = <span class="built_in">arguments</span>.length</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i ++ ) &#123;</span><br><span class="line">        <span class="comment">// 如果要拼接的是数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">arguments</span>[i]) === <span class="string">'[object Array]'</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> len2 = <span class="built_in">arguments</span>[i].length</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len2; j ++) &#123;</span><br><span class="line">                arr[arr.length] = <span class="built_in">arguments</span>[i][j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果是数值</span></span><br><span class="line">            arr[arr.length] = <span class="built_in">arguments</span>[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arrays </tag>
            
            <tag> es6 </tag>
            
            <tag> 原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]css加载会造成阻塞吗？</title>
      <link href="/blog/css/cjzjhsmjj000zz0uza06meh27/"/>
      <url>/blog/css/cjzjhsmjj000zz0uza06meh27/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者：陈纪庚<br>链接：<a href="https://juejin.im/post/5b88ddca6fb9a019c7717096" target="_blank" rel="noopener">https://juejin.im/post/5b88ddca6fb9a019c7717096</a><br>来源：掘金</p></blockquote><p>之前面试今日头条的时候，今日头条面试官问我，js执行会阻塞DOM树的解析和渲染，那么css加载会阻塞DOM树的解析和渲染吗？所以，接下来我就来对css加载对DOM树的解析和渲染做一个测试。</p><p>为了完成本次测试，先来科普一下，如何利用chrome来设置下载速度</p><ul><li>打开chrome控制台(按下F12),可以看到下图，重点在我画红圈的地方</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC84LzMxLzE2NThlYTI1MjJlMDRiZGI_aW1hZ2VWaWV3Mi8wL3cvMTI4MC9oLzk2MC9mb3JtYXQvd2VicC9pZ25vcmUtZXJyb3IvMQ" alt></p><ul><li>点击我画红圈的地方(No throttling),会看到下图,我们选择GPRS这个选项</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC84LzMxLzE2NThlYTI1MjJkZDY5MWM_aW1hZ2VWaWV3Mi8wL3cvMTI4MC9oLzk2MC9mb3JtYXQvd2VicC9pZ25vcmUtZXJyb3IvMQ" alt></p><p>这样，我们对资源的下载速度上限就会被限制成20kb/s，好，那接下来就进入我们的正题</p><h2 id="css加载会阻塞DOM树的解析渲染吗？"><a href="#css加载会阻塞DOM树的解析渲染吗？" class="headerlink" title="css加载会阻塞DOM树的解析渲染吗？"></a>css加载会阻塞DOM树的解析渲染吗？</h2><p>用代码说话：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>css阻塞<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      h1 &#123;</span><br><span class="line">        color: red !important</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">h</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">'h1'</span>))</span></span><br><span class="line">      &#125;</span><br><span class="line">      setTimeout(h, 0)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是红色的<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>假设</strong>： css加载会阻塞DOM树解析和渲染</p><p><strong>假设结果</strong>: 在bootstrap.css还没加载完之前，下面的内容不会被解析渲染，那么我们一开始看到的应该是白屏，h1不会显示出来。并且此时console.log的结果应该是一个空数组。</p><p><strong>实际结果</strong>:如下图</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC84LzMxLzE2NThlYTI1MjMyMWNiMGY_aW1hZ2VzbGlt" alt></p><p>css会阻塞DOM树解析？</p><p>由上图我们可以看到，当css还没加载完成的时候，h1并没有显示，但是此时控制台输出如下</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC84LzMxLzE2NThlYTI1MjJmMjQzOWM_aW1hZ2VWaWV3Mi8wL3cvMTI4MC9oLzk2MC9mb3JtYXQvd2VicC9pZ25vcmUtZXJyb3IvMQ" alt></p><p>可以得知，此时DOM树至少已经解析完成到了h1那里，而此时css还没加载完成，也就说明，css并不会阻塞DOM树的解析。</p><p>css加载会阻塞DOM树渲染？</p><p>由上图，我们也可以看到，当css还没加载出来的时候，页面显示白屏，直到css加载完成之后，红色字体才显示出来，也就是说，下面的内容虽然解析了，但是并没有被渲染出来。所以，css加载会阻塞DOM树渲染。</p><p>个人对这种机制的评价</p><p>其实我觉得，这可能也是浏览器的一种优化机制。因为你加载css的时候，可能会修改下面DOM节点的样式，如果css加载不阻塞DOM树渲染的话，那么当css加载完之后，DOM树可能又得重新重绘或者回流了，这就造成了一些没有必要的损耗。所以我干脆就先把DOM树的结构先解析完，把可以做的工作做完，然后等你css加载完之后，在根据最终的样式来渲染DOM树，这种做法性能方面确实会比较好一点。</p><h2 id="css加载会阻塞js运行吗？"><a href="#css加载会阻塞js运行吗？" class="headerlink" title="css加载会阻塞js运行吗？"></a>css加载会阻塞js运行吗？</h2><p>​<br>由上面的推论，我们可以得出，css加载不会阻塞DOM树解析，但是会阻塞DOM树渲染。那么，css加载会不会阻塞js执行呢?</p><p>同样，通过代码来验证.</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>css阻塞<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'before css'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> startDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是红色的<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> endDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'after css'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'经过了'</span> + (endDate -startDate) + <span class="string">'ms'</span>)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>假设</strong>: css加载会阻塞后面的js运行</p><p><strong>预期结果</strong>: 在link后面的js代码，应该要在css加载完成后才会运行</p><p><strong>实际结果</strong>:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC84LzMxLzE2NThlYTI1MjMwNWZmMGY_aW1hZ2VzbGlt" alt></p><p>由上图我们可以看出，位于css加载语句前的那个js代码先执行了，但是位于css加载语句后面的代码迟迟没有执行，直到css加载完成后，它才执行。这也就说明了，css加载会阻塞后面的js语句的执行。详细结果看下图(css加载用了5600+ms):</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC84LzMxLzE2NThlYTI1MjJmZjM2M2Q_aW1hZ2VWaWV3Mi8wL3cvMTI4MC9oLzk2MC9mb3JtYXQvd2VicC9pZ25vcmUtZXJyb3IvMQ" alt></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>由上所述，我们可以得出以下结论:</p><ol><li>css加载不会阻塞DOM树的解析</li><li>css加载会阻塞DOM树的渲染</li><li>css加载会阻塞后面js语句的执行</li></ol><p>因此，为了避免让用户看到长时间的白屏时间，我们应该尽可能的提高css加载速度，比如可以使用以下几种方法:</p><ol><li>使用CDN(因为CDN会根据你的网络状况，替你挑选最近的一个具有缓存内容的节点为你提供资源，因此可以减少加载时间)</li><li>对css进行压缩(可以用很多打包工具，比如webpack,gulp等，也可以通过开启gzip压缩)</li><li>合理的使用缓存(设置cache-control,expires,以及E-tag都是不错的，不过要注意一个问题，就是文件更新后，你要避免缓存而带来的影响。其中一个解决防范是在文件名字后面加一个版本号)</li><li>减少http请求数，将多个css文件合并，或者是干脆直接写成内联样式(内联样式的一个缺点就是不能缓存)</li></ol><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><p>那么为什么会出现上面的现象呢？我们从浏览器的渲染过程来解析下。</p><p>不用浏览器使用的内核不同，所以他们的渲染过程也是不一样的。目前主要有两个：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC85LzMvMTY1OWRiMTRlNzczZjljYz9pbWFnZVZpZXcyLzAvdy8xMjgwL2gvOTYwL2Zvcm1hdC93ZWJwL2lnbm9yZS1lcnJvci8x" alt="webkit渲染过程"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC85LzMvMTY1OWRiMTRlN2RmOGE4Zj9pbWFnZVZpZXcyLzAvdy8xMjgwL2gvOTYwL2Zvcm1hdC93ZWJwL2lnbm9yZS1lcnJvci8x" alt="Gecko渲染过程"></p><p>从上面两个流程图我们可以看出来，浏览器渲染的流程如下：</p><ol><li>HTML解析文件，生成DOM Tree，解析CSS文件生成CSSOM Tree</li><li>将Dom Tree和CSSOM Tree结合，生成Render Tree(渲染树)</li><li>根据Render Tree渲染绘制，将像素渲染到屏幕上。</li></ol><p>从流程我们可以看出来</p><ol><li>DOM解析和CSS解析是两个并行的进程，所以这也解释了为什么CSS加载不会阻塞DOM的解析。</li><li>然而，由于Render Tree是依赖于DOM Tree和CSSOM Tree的，所以他必须等待到CSSOM Tree构建完成，也就是CSS资源加载完成(或者CSS资源加载失败)后，才能开始渲染。因此，CSS加载是会阻塞Dom的渲染的。</li><li>由于js可能会操作之前的Dom节点和css样式，因此浏览器会维持html中css和js的顺序。因此，样式表会在后面的js执行前先加载执行完毕。所以css会阻塞后面js的执行。</li></ol><p>以上，就是所有内容。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[原]HTTP - - HTTP协议简要分析（1）</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C/cjzjhsmkt001mz0uzctl9tueg/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C/cjzjhsmkt001mz0uzctl9tueg/</url>
      
        <content type="html"><![CDATA[<p>HTTP（Hypertext Transfer Protocol）协议是w3c于1990年颁布的一个属于应用层的面向对象的协议，主要适用于分布式超媒体信息系统。</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP协议是指客户端程序与web服务器的请求、响应的交互过程中所必须要遵守的规则和数据格式，即通信规范。</p><p>在此，客户端程序是指web浏览器、网络爬虫或者其他的应用程序；web服务器是指提供<a href="https://baike.baidu.com/item/WWW%E6%9C%8D%E5%8A%A1/10185376?fr=aladdin" target="_blank" rel="noopener">www类型服务</a>的主机。HTTP服务是目前在因特网上使用最广泛的应用层协议。它主要用于传输采用HTML实现的页面文件，而客户端浏览器与web服务器之间通过这个协议，使得网友可以拿鼠标达到全世界（当然，首先要翻墙才可以到一些到不了的地方），并通过特定的程序与web服务器进行人机交互，也就是请求响应。</p><p>tip：基于HTTP协议的客户端程序也被称为用户代理（User Agent），在用户代理和目标服务器之间存在多个不同形式的中间层（如代理、网关等）。浏览器也并不是基于HTTP协议的唯一客户端程序，在应用中还可以有搜索引擎、手机、掌上电脑、机顶盒等设备和程序，它们也通过HTTP协议与对应的web服务器之间进行通信和数据交换。</p><h2 id="HTTP协议主要的协议特性"><a href="#HTTP协议主要的协议特性" class="headerlink" title="HTTP协议主要的协议特性"></a>HTTP协议主要的协议特性</h2><h3 id="HTTP协议是建立在TCP-IP上层的应用层协议"><a href="#HTTP协议是建立在TCP-IP上层的应用层协议" class="headerlink" title="HTTP协议是建立在TCP/IP上层的应用层协议"></a>HTTP协议是建立在TCP/IP上层的应用层协议</h3><p>HTTP协议不仅保证客户端程序正确和快速地传输超文本文件信息，而且是一个基于请求/响应模式的无状态的协议。HTTP之所以简单和能够快速响应，主要是由于客户端程序向服务器程序发送HTTP请求时，只需要传送请求的方式和目标资源的路径和文件名，并且请求的方式可以为get，post和head等多种形式。</p><h3 id="HTTP协议是一个基于请求-响应模式的无状态的协议"><a href="#HTTP协议是一个基于请求-响应模式的无状态的协议" class="headerlink" title="HTTP协议是一个基于请求/响应模式的无状态的协议"></a>HTTP协议是一个基于请求/响应模式的无状态的协议</h3><p>协议的状态是指在下一次传输时可以保留本次传输信息的能力，而无状态也就是之HTTP协议对于事务处理没有记忆的能力，如果用户代理在后续处理中需要应用前次请求的信息，则必须重新请求。</p><p>基于请求/响应也就意味着客户端每次更新信息时都要重新向web服务器发出请求，HTTP协议具有无状态的特性，也就意味着客户端浏览器获取了所请求的目标资源后，将于web服务器断开网络连接而空出不再需要的网络连接资源。</p><p>因此，无状态的特性可<strong>提升分布式应用系统的性能，也允许在同一个页面中包括分布在相距很远的不同服务器中的其他信息。</strong></p><p>但是无状态的特性将会<strong>导致每次连接传送的数据量增大，同时也为实现会话跟踪带来一定的技术实现上的复杂性。</strong></p><h3 id="无永久连接"><a href="#无永久连接" class="headerlink" title="无永久连接"></a>无永久连接</h3><p>HTTP协议所具有的无永久连接的含义是指限制每次连接只处理一个请求，并且服务器处理完客户端程序的请求并受到客户端程序的应答信息后立即断开与客户端程序之间的网络连接，从而提高传输性能和减少传输时间。</p><h2 id="HTTP服务器默认的TCP连接的端口为80"><a href="#HTTP服务器默认的TCP连接的端口为80" class="headerlink" title="HTTP服务器默认的TCP连接的端口为80"></a>HTTP服务器默认的TCP连接的端口为80</h2><p>每当客户端程序向web服务器发送一个HTTP请求后，也就建立出一个到web服务器指定端口的TCP连接。这个指定的端口就是80；如果HTTP服务器的端口号不是80，则在访问该web服务器时必须给定具体的端口号，比如tomcat服务器默认的端口号为8080。</p><h2 id="HTTP协议中的请求头和响应信息"><a href="#HTTP协议中的请求头和响应信息" class="headerlink" title="HTTP协议中的请求头和响应信息"></a>HTTP协议中的请求头和响应信息</h2><h3 id="HTTP消息的基本组成"><a href="#HTTP消息的基本组成" class="headerlink" title="HTTP消息的基本组成"></a>HTTP消息的基本组成</h3><p>HTTP消息包括客户端程序向web服务器发送的请求消息和web服务器端程序向客户端程序返回的响应消息，而且他们都是由一个请求起始行、一个或者多个头域、一个标识头域结束的空行和可选的消息体组成。</p><h3 id="HTTP协议中头域的基本组成"><a href="#HTTP协议中头域的基本组成" class="headerlink" title="HTTP协议中头域的基本组成"></a>HTTP协议中头域的基本组成</h3><p>HTTP协议的头域主要包括通用头、请求头、响应头和实体头4个部分。每个头域由域名、冒号和域值三部分组成。</p><p><strong>通用头域</strong>包含请求和响应消息都支持的头域，提供了与报文相关的最基本的信息，通用头域包含Cache-Control、Connection、Date、Pragma、Transfer-Encoding、Upgrade、Via；</p><p><strong>请求消息</strong>的第一行为下面的格式： </p><p>MethodSPRequest-URISPHTTP-VersionCRLF</p><p>Method 表示对于Request-URI完成的方法，这个字段是大小写敏感的，包括OPTIONS、GET、HEAD、POST、PUT、DELETE、 TRACE。</p><p><strong>响应消息</strong>的第一行为下面的格式： </p><p>HTTP-VersionSPStatus-CodeSPReason-PhraseCRLF </p><p>HTTP -Version表示支持的HTTP版本，例如为HTTP/1.1。Status- Code是一个三个数字的结果代码。Reason-Phrase给Status-Code提供一个简单的文本描述。</p><p>请求消息和响应消息都可以包含实体信息，实体信息一般由实体头域和实体组成。实体头域包含关于实体的原信息，实体头包括Allow、Content- Base、Content-Encoding、Content-Language、 Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type、 Etag、Expires、Last-Modified、extension-header。</p><p>具体的header详解可以查看这篇<a href="https://my.oschina.net/gaomq/blog/1795002" target="_blank" rel="noopener">博文</a>。</p><h3 id="通用头（General-Header）"><a href="#通用头（General-Header）" class="headerlink" title="通用头（General Header）"></a>通用头（General Header）</h3><p>这里以我的CSDN博客首页的请求为例。</p><p><img src="https://img-blog.csdn.net/20180911223229752?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phY29veA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt>                  </p><p>其中，</p><p>Request URL : 请求的URL</p><p>Request Method : 请求的方式</p><p>Status Code : 响应输出的状态码</p><p>Remote Address : 远程地址，包括 IP地址：端口号</p><p>Referrer Policy : 来源协议，用来规定是否发送referrer消息，此处表示仅当发生协议降级（如 HTTPS 页面引入 HTTP 资源，从 HTTPS 页面跳到 HTTP 等）时不发送 Referrer 信息。这个规则是现在大部分浏览器默认所采用的。对于此协议的几种值可以查看此<a href="https://blog.csdn.net/lancelot_lewis/article/details/81133371" target="_blank" rel="noopener">博客</a>。</p><h3 id="服务端响应消息（Response-Headers）"><a href="#服务端响应消息（Response-Headers）" class="headerlink" title="服务端响应消息（Response Headers）"></a>服务端响应消息（Response Headers）</h3><p>​​​<br>​​​​同样以我的CSDN博客首页的请求为例。</p><p><img src="https://img-blog.csdn.net/20180911224534883?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phY29veA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>其中，</p><p>Connection : 是否开启HTTP持久连接，此处表示开启，HTTP 1.1默认值；HTTP 1.0默认值是 close,表示关闭HTTP持久连接。</p><p>Content-Encoding : web服务器支持的返回内容压缩编码类型。</p><p>Content-Type : 相应内容的类型，更多内容可以查询此<a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">常用对照表</a>。</p><p>Date : 表示发起请求的世界时。</p><p>Keep-Alive : 表示HTTP持久连接在请求响应后延迟多长时间关闭。</p><p>Server : web服务器软件的名称。</p><p>Strict-Transport-Security : 表示这个网站禁止使用HTTP方式加载，浏览器应该自动把所有尝试使用HTTP的请求自动替换为HTTPS请求， max-age 表示缓存秒数。</p><p>Transfer-Encoding : 文件传输编码。</p><p>Vary : 告诉下游代理是使用缓存响应还是从原始服务器请求。</p><h3 id="客户端发送消息（Request-Headers）"><a href="#客户端发送消息（Request-Headers）" class="headerlink" title="客户端发送消息（Request Headers）"></a>客户端发送消息（Request Headers）</h3><p>​​​<br>​​​​同样以我的CSDN博客首页的请求为例。</p><p><img src="https://img-blog.csdn.net/20180911230606720?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phY29veA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>Accept : 指定客户端能够接收的内容类型，内容类型中的先后次序表示客户端接收的先后次序</p><p>Accept-Encoding : 指定客户端浏览器可以支持的web服务器返回内容压缩编码类型。</p><p>Accept-Language : 指定HTTP客户端浏览器用来展示返回信息所优先选择的语言。</p><p>Cache-Control : 告诉所有的缓存机制是否可以缓存及哪种类型。</p><p>Cookie : HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</p><p>Host : 请求的web服务器域名地址。</p><p>Referer : 包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。</p><p>Upgrade-Insecure-Requests : 对应服务器的响应头的 Content-Security-Policy: upgrade-insecure-requests，而在浏览器的请求头出现的 Upgrade-Insecure-Requests:1 则是告诉服务器，自己支持这种操作，也就是我能读懂你服务器发过来的上面这条信息，并且在以后发请求的时候不用http而用https。</p><p>User-Agent : HTTP客户端运行的浏览器类型的详细信息。</p><h3 id="主要的响应输出的状态码及其功能说明"><a href="#主要的响应输出的状态码及其功能说明" class="headerlink" title="主要的响应输出的状态码及其功能说明"></a>主要的响应输出的状态码及其功能说明</h3><p>​​​​<br>​​​关于状态码可以直接查看我之前写的博客：常见的十个HTTP协议状态码。</p><p>（未完待续）</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[原]TCP协议的三次握手与四次挥手</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C/cjzjhsmj6000vz0uzvh1szuup/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C/cjzjhsmj6000vz0uzvh1szuup/</url>
      
        <content type="html"><![CDATA[<p>TCP协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP层是位于IP层之上，应用层之下的中间层。</p><p>现在要讨论的就是TCP协议建立连接和连接终止的过程。</p><h2 id="连接建立"><a href="#连接建立" class="headerlink" title="连接建立"></a>连接建立</h2><p>连接建立使用的是三次握手协议。</p><p>三次握手的目的是为了确认两台主机均具备收和发的能力。之所以是三次我想继续往下看就会了解的。</p><p>三次握手的过程：</p><ol><li>A主机向B主机发起连接请求，让B主机知道A主机可以发送消息；</li><li>B主机向A主机回复消息，让A主机知道B主机能接收到，也能发送；</li><li>A主机向B主机回复消息，让B主机知道A主机可接收消息。</li></ol><p>当然真的过程必定带着消息的传送，上面只是简单的概述一下整个过程，下面通过一幅图来了解这个过程。</p><p>在此之前需要了解其中的一些名词的意义：</p><ul><li>SYN : 建立连接；</li><li>seq ：序列号，随机生成；</li><li>ack ：确认消息，取值为 seq + 1;</li></ul><p><img src="https://img-blog.csdn.net/20180830160019297?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phY29veA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><ol><li>客户端发送SYN（SEQ=n）报文给服务器端，进入SYN_SEND状态。</li><li>服务器端收到SYN报文，回应一个SYN （SEQ=u）ACK(ACK=n+1）报文，进入SYN_RECV状态。</li><li>客户端收到服务器端的SYN报文，回应一个ACK(ACK=u+1）报文，进入Established状态。</li></ol><p>至此，连接就已经建立完成了，可以开始传送数据了。</p><p>从上面的过程我们可以知道必须要用三次才可以完全了解到双方都是可以发送并接收数据的。</p><h2 id="连接终止"><a href="#连接终止" class="headerlink" title="连接终止"></a>连接终止</h2><p>连接终止使用的是四次挥手协议。</p><p>四次挥手的目的是为了确认数据完全接受，并且关闭连接。</p><p>四次挥手的过程：</p><ol><li>A主机告诉B主机数据发送完了；</li><li>B主机告诉A主机知道A主机把数据发完了；</li><li>B主机告诉A主机数据接收完了；</li><li>A主机告诉B主机知道B主机把数据接收完了。</li></ol><p>同样，我们通过一个图来了解这个过程。</p><ul><li>FIN ： 终止，结束，类似于SYN</li></ul><p><img src="https://img-blog.csdn.net/20180830161844108?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phY29veA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><ol><li>某个应用进程首先调用close，称该端执行“主动关闭”（active close）。该端的TCP于是发送一个FIN分节，表示数据发送完毕；</li><li>接收到这个FIN的对端执行 “被动关闭”（passive close），这个FIN由TCP确认；</li><li>一段时间后，接收到这个文件结束符的应用进程将调用close关闭它的套接字。这导致它的TCP也发送一个FIN；</li><li>接收这个最终FIN的原发送端TCP（即执行主动关闭的那一端）确认这个FIN。</li></ol><p>至此，连接也就终止了。</p><p>而需要四次是因为：在A主机发送完数据后，可能因为一些延迟，B主机并不能立刻完全接收数据。所以需要先告诉A主机，我知道你发完了，但是我还没有接受完数据，然后等数据完全接收完了之后再告诉A主机我接收完了。这就需要四次才可以完成整个过程。</p><p>以上就是全部内容。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[原]常见的十个HTTP协议状态码</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C/cjzjhsmur0033z0uztzfnszut/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C/cjzjhsmur0033z0uztzfnszut/</url>
      
        <content type="html"><![CDATA[<p>首先看一下百科对HTTP状态码的解释。 </p><blockquote><p>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由 RFC 2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774、RFC 4918等规范扩展。</p></blockquote><p>通俗的讲就是当客户端给服务器端发起请求时，无论成功与否，服务器端总是会返回一个3位数的数字代码， 代表请求的结果，这三位数就是<strong>HTTP状态码</strong>，如下图所示。</p><p><img src="https://img-blog.csdn.net/20180829150433415?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phY29veA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>其中的 <strong>Status Code</strong> 就是HTTP状态码。</p><p>HTTP状态码大致分为5类：</p><p>1xx : 消息，这一类型的状态码，代表请求已被接受，需要继续处理。但是一般服务器禁止向客户端发送此类状态码；</p><p>2xx : 成功，这一类型的状态码，代表请求已成功被服务器接收、理解、并接受；</p><p>3xx : 重定向，这类状态码代表需要客户端采取进一步的操作才能完成请求；</p><p>4xx : 请求错误，这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理；</p><p>5xx : 服务器错误，这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。</p><hr><p>在这里，只介绍常见的十个HTTP状态码，也是必须要记住的十个。</p><p>200 : 成功，表示访问成功，正常状态。</p><p>301 : 永久移动，表示本网页已经永久性的移动到一个新的地址，在客户端自动将请求地址改为服务器返回的新地址。</p><p>302 : 临时重定向，表示网页暂时性的转移到一的新的地址，客户端在以后可以继续向本地址发起请求。</p><p>303 : 表示必须临时重定向，并且必须使用GET方式请求。</p><p>304 : 重定向至浏览器本身，当浏览器多次发起同一请求，且内容未更改时，使用浏览器缓存，这样可以减少网络开销。</p><p>401 : 表示协议格式出错，可能是此IP地址被禁止访问该资源，与403类似。</p><p>403 : 表示没有权限，服务器拒绝访问请求。</p><p>404 : 这是最常见的错误，表示找不到系统资源，但是只是暂时性地。</p><p>500 : 表示服务器程序错误，一个通用的错误信息。</p><p>503 : 表示服务器繁忙，或者服务器负载，通常这只是一个临时状态。</p><p>以上就是全部内容，首先就是不全面，可能也会因为自己理解的不深会有部分错误，望海涵。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 状态码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[原]DNS域名解析过程</title>
      <link href="/blog/%E7%BD%91%E7%BB%9C/cjzjhsmiv000pz0uzlkl0vjha/"/>
      <url>/blog/%E7%BD%91%E7%BB%9C/cjzjhsmiv000pz0uzlkl0vjha/</url>
      
        <content type="html"><![CDATA[<p>当我们在浏览器中输入一个域名（eg: <a href="http://www.baidu.com）时，浏览器会显示域名所对应的网站的内容，在输入域名到浏览器显示内容这个过程中就发生了域名解析，即将域名解析成IP的过程。" target="_blank" rel="noopener">www.baidu.com）时，浏览器会显示域名所对应的网站的内容，在输入域名到浏览器显示内容这个过程中就发生了域名解析，即将域名解析成IP的过程。</a></p><p>首先解释一下域名解析的概念。（来自<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/574285" target="_blank" rel="noopener">百度百科</a>）</p><blockquote><p>域名解析是把域名指向网站空间IP，让人们通过注册的域名可以方便地访问到网站的一种服务。IP地址是网络上标识站点的数字地址，为了方便记忆，采用域名来代替IP地址标识站点地址。域名解析就是域名到IP地址的转换过程。域名的解析工作由DNS服务器完成。</p></blockquote><p>按个人理解，DNS域名解析大概分为5个步骤，以下。</p><ul><li><p>我们在浏览器地址栏输入一个域名，浏览器得到域名，首先在浏览器的本地缓存中查看，有没有与此域名对应的IP；</p></li><li><p>如果没有查找到就会继续查看计算机本地的HOST指向，有没有相关的记录；</p></li></ul><blockquote><p>HOST：计算机本地的一个文件，记录着域名与IP的映射关系。</p></blockquote><ul><li><p>如果仍没有查找到就会查看本地的DNS解析服务器（ LDNS ），这些服务器通常在每个城市都有；</p></li><li><p>如果还是没有查找到就会查看gTLD Server（通用顶级域）；</p></li></ul><blockquote><p>每个顶级域名都有一个记录着所以注册过相应域名的记录，如.com域名的服务器记录着全部注册过的.com域名。</p></blockquote><p>LDNS会访问gTLD其中的一台机器，当这台机器接收到这个域名后，会告诉LDNS应该去访问哪台机器，然后LDNS再去相应的机器去询问这个域名对应的IP； </p><ul><li>LDNS从gTLD获取到IP后会把这个信息返回给发出请求的计算机，LDNS会在本地进行缓存，浏览器也会对这个域名和IP进行缓存，保证下次访问这个域名时可以很快的响应。</li></ul><p>至此，整个过程就结束了，其中的专业名词均可在百度查找到相关解释。</p><p>（灵感来自微信公众号：Duing）</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
            <tag> 域名解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[原]js网络请求性能优化之防抖与节流</title>
      <link href="/blog/js/cjzjhsmj0000tz0uznystbxuj/"/>
      <url>/blog/js/cjzjhsmj0000tz0uznystbxuj/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>防抖(debounce)</strong>：在函数需要频繁触发时，只有当有足够空闲的时间时，才执行一次。就好像在百度搜索时，每次输入之后都有联想词弹出，这个控制联想词的方法就不可能是输入框内容一改变就触发的，他一定是当你结束输入一段时间之后才会触发。</p><p><strong>节流(thorttle)</strong>：预定一个函数只有在大于等于执行周期时才执行，周期内调用不执行。就好像你在淘宝抢购某一件限量热卖商品时，你不断点刷新点购买，可是总有一段时间你点上是没有效果，这里就用到了节流，就是怕点的太快导致系统出现bug。</p><p><strong>区别</strong>：在发生持续触发事件时，防抖设置事件延迟并在空闲时间去触发事件，而节流则是隔一定的时间触发一次。</p><h2 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h2><p>函数防抖运用的实际场景有：实时搜索，拖拽，登录用户名密码格式验证等等。</p><p>实现函数防抖的关键就是对setTimeout()这个方法的运用。先以实时搜索为例分析一下。</p><p>首先我们要写一个监听函数用来监听搜索框的value的变化。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oInp;<span class="comment">// 假设在此取得输入框</span></span><br><span class="line">oInp.oninput = ajax;</span><br><span class="line"><span class="comment">// 模拟ajax请求后台数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);<span class="comment">// 搜索框value值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完之后我们会发现每当我们输入一个单词，即每当搜索框内容发生变化时都会触发我们的监听函数来请求后台数据，如此频繁的请求肯定不是我们想要的，所以我们就需要稍加处理一下，使其不再一改变就触发，而是当我们输完之后再触发发送请求。针对这种需求我们可以使用防抖来实现。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oInp;<span class="comment">// 假设在此取得输入框</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>; <span class="comment">// 定义一个全局定时器</span></span><br><span class="line">oInp.oninput = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ajax();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 模拟ajax请求后台数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);<span class="comment">// 搜索框value值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个整体的实现思想就是，当搜索框内容发生改变时，就会触发一个定时器。但是当搜索框内容再次发生改变时，我们先清除上一个定时器，再重新创建一个定时器。这样，只有当我们结束输入，搜索框内容在一定时间内不再发生改变时才会发送请求。</p><p>但是上面的代码块还有两个问题，一个就是this的指向，setTimeout()形成了一个闭包，当执行的时候，ajax()方法中的this实际指向window，所以我们还需要进行以下优化，改变this指向。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oInp;<span class="comment">// 假设在此取得输入框</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>; <span class="comment">// 定义一个全局定时器</span></span><br><span class="line">oInp.oninput = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>; </span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ajax().apply(_this); <span class="comment">// 绑定this</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 模拟ajax请求后台数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);<span class="comment">// 搜索框value值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个问题就是e – 事件对象，在上面一系列的方法调用之中，e已经被丢了，变成了undefined,所以我们还需要进行以下优化，将事件对象重新找回来。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oInp;<span class="comment">// 假设在此取得输入框</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>; <span class="comment">// 定义一个全局定时器</span></span><br><span class="line">oInp.oninput = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>,</span><br><span class="line">        _arg = <span class="built_in">arguments</span>; <span class="comment">// e</span></span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ajax().apply(_this, _arg); <span class="comment">// 绑定this, 传入e</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 模拟ajax请求后台数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);<span class="comment">// 搜索框value值</span></span><br><span class="line">    <span class="built_in">console</span>.log(e); <span class="comment">// 事件对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上就基本实现了函数防抖。为了实现通用性，在这里将防抖封装成一个方法，方便之后重复使用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">handle, delay</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>,</span><br><span class="line">    _arg = <span class="built_in">arguments</span>;</span><br><span class="line">clearTimeout(timer);</span><br><span class="line">timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">handle.apply(_this, _arg);</span><br><span class="line">&#125;, delay);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">// 其中 handle 为需要进行防抖操作的函数，delay 为延迟时间</span></span><br></pre></td></tr></table></figure><h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><p>函数节流运用的实际场景有：窗口调整，页面滚动，抢购疯狂点击等等。</p><p>在这里以疯狂点击为例进行分析。</p><p>首先写一个简单的页面，当点击按钮时，数字不断增大，模拟抢购按钮。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"show"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'show'</span>),</span></span><br><span class="line"><span class="javascript">oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="javascript">oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">oDiv.innerHTML = <span class="built_in">parseInt</span>(oDiv.innerHTML) + <span class="number">1</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们肯定不希望用户去疯狂点击导致数字不断增加，甚至是使用恶意脚本去实现疯狂点击按钮</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i ++) &#123;</span><br><span class="line">    oBtn.onclick();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以就要引入一个新思想，那就是在一秒钟之内无论用户点多少次，都只算他点了一次，这就是节流的核心思想。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">handle, wait</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> lasttime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> nowtime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="keyword">if</span>(nowtime - lasttime &gt; wait) &#123;</span><br><span class="line">handle.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">lasttime = nowtime;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">oDiv.innerHTML = <span class="built_in">parseInt</span>(oDiv.innerHTML) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">oBtn.onclick = throttle(buy, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>现在分析一下throttle方法。</p><p>参数中 handle 为需要进行节流的方法，wait为等待时间。</p><p>因为我们需要实现在一定的等待时间wait内不能执行buy()方法，所以首先需要两个时间戳，一个记录第一次点击的时间lasttime，一个记录当前的时间nowtime，只有当 nowtime 与 lasttime 的时间差大于wait时，才会再次触发buy()，同时改变lasttime为新时间戳。</p><p>放在throttle()中就是首先记录初始时间为0，当第一次点击时，获得现在时间为nowtime，时间差大于wait，执行buy(),然后本次点击的时间就成了一个新的时间点，下次点击就需要和这次点击的时间进行判断，所以设置当前时间为初始时间，然后下次点击时继续判断。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>防抖和节流虽然实现起来不难，但在实际开发中还是很常用的，因为它们可以极大的优化网络请求性能，提高用户体验。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> 防抖 </tag>
            
            <tag> 节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[原]js实现无缝轮播图插件</title>
      <link href="/blog/js/cjzjhsmk70017z0uz6f3g44im/"/>
      <url>/blog/js/cjzjhsmk70017z0uz6f3g44im/</url>
      
        <content type="html"><![CDATA[<p>看了几个网上的轮播图例子，然后理解了其中的原理，自己写了一个插件，实现了无缝轮播。</p><p>先来说一下实现原理：</p><ul><li><p>首先要明确做一个插件的基本要求，我认为至少需要满足以下几点要求：具备默认设置参数的功能；插件自身的作用域与用户的作用域相互独立；用户可以自己调节参数达到自己想要的效果。</p></li><li><p>然后看一下轮播图的需求。</p></li></ul><p>我们需要实现下图所示的轮播图，它具有以下功能：</p><p>A. 每隔一定的时间图片自动播放；</p><p>B. 点击对应的圆点跳转到对应的图片；</p><p>C. 点击两边的按钮可以播放上一张图或者下一张图；</p><p>D. 当鼠标悬停在图片上方时暂停播放。</p><p><img src="https://img-blog.csdn.net/20180605183306427?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phY29veA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="效果图"></p><ul><li>然后需要考虑轮播图从何下手。</li></ul><p>首先要实现功能A，这里已默认5张图为例，真实的图片肯定不是五张，这个想必大家都已知道，如果后台仍然使用5张图就不可能实现真正的无缝了。而在此我们不仅要实现自动播放，还要实现按钮功能，所以我们还需有第一张图跳转到最后一张图的功能，所以需要7张图片。然后要实现图片轮播的效果就要让图片在一条线上，使用float可以轻松实现（这里要注意，我们整个框架是：div&gt;ul&gt;li&gt;img，div和li，img肯定是固定宽高，而ul就需要内容撑开宽度了，我们不知道图片的数量，如果固定了宽度，就会造成图片不再一条线上）；接着要让他动起来，我们首先想到的是通过改变ul的left值来改变图片的显示，当然这里我也用的是left，但是如果使用left会降低效率，不如用translateX()更加高效。不过那个还没有做出来，等后面做出来了再修改一下。自动播放就是把这个功能放在一个setInterval()里面就可以了。</p><p>其次要实现功能B，看到这个功能我们想到的是如何将圆点与图片连接起来，还有处理圆点的点击事件。针对前一个问题，我的解决方法是给span(圆点)添加data-index属性，并对其编号，这样我们通过点击获得的编号就可以知道要跳转到哪张图片了。针对后一个问题，我想到了可以给span外面包一层div，然后给div添加点击事件，通过事件冒泡得到事件源（即target属性），然后获取事件源的data-index即可。</p><p>然后是功能C，这个就比较简单了，右边的按钮就是触发一次播放的动画，左边的按钮就是反方向触发一次放的动画。</p><p>最后是功能D，可以通过hover()清除setInterval()，移除后重新创建一个。</p><p>考虑到插件的兼容性，即因为图片数量是未知的，所以小圆点span标签需要动态创建，同时对两个按钮也动态创建。</p><ul><li>了解了所有需求以及实现方法就要开始正式写代码了。</li></ul><p>先附上结构</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"carousel-item"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/-jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"carousel-item"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/-jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"carousel-item"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/-jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"carousel-item"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/-jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"carousel-item"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/-jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"carousel-item"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/-jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"carousel-item"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/-jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先我们扩展一个封装函数sowingMap()，并在函数内通过jq的extend方法处理参数，如果用户没有传进来参数就使用默认参数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.fn.sowingMap = <span class="function"><span class="keyword">function</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = $.extend(&#123;</span><br><span class="line">            count : <span class="number">2</span>,<span class="comment">//图片数量</span></span><br><span class="line">            time : <span class="number">3000</span> <span class="comment">//自动播放时间间隔</span></span><br><span class="line">        &#125;, option);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><p>为了结构看起来清楚明了，我另外创建了一个“构造函数”Init()，并在此函数的原型链上编程。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Init</span>(<span class="params">ele, args</span>) </span>&#123; <span class="comment">//ele:父级节点，args:参数列表</span></span><br><span class="line">    <span class="keyword">if</span> (args.count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.init(ele, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">'请输入正确的图片数量'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Init.prototype = &#123;&#125;</span><br></pre></td></tr></table></figure><p>在原型链上，首先写一个入口函数init()处理传进来的参数，并初始化后面需要用到的dom节点，调用主要函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">init : <span class="function"><span class="keyword">function</span>(<span class="params">ele, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ele = ele,</span><br><span class="line">    <span class="keyword">this</span>.count = args.count,</span><br><span class="line">    <span class="keyword">this</span>.time = args.time,</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>,</span><br><span class="line">    <span class="keyword">this</span>.oUl = <span class="keyword">this</span>.ele.find(<span class="string">'.carousel-inner'</span>),</span><br><span class="line">    <span class="keyword">this</span>.oLi = <span class="keyword">this</span>.oUl.find(<span class="string">'.carousel-item'</span>),</span><br><span class="line">    <span class="keyword">this</span>.createSpan(), <span class="comment">//生成圆点以及左右按钮</span></span><br><span class="line">    <span class="keyword">this</span>.handleUl(), <span class="comment">//处理图片</span></span><br><span class="line">    <span class="keyword">this</span>.automatic(), <span class="comment">//自动播放</span></span><br><span class="line">    <span class="keyword">this</span>.eventBind()  <span class="comment">//点击事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写一个handleUl()方法，用来处理图片，即复制最后一张图片并将其接在第一位，复制第一张图片并将其接在最后一位。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleUl : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> last = <span class="keyword">this</span>.oLi.eq(<span class="number">0</span>).clone(),</span><br><span class="line">        first = <span class="keyword">this</span>.oLi.eq(<span class="keyword">this</span>.count - <span class="number">1</span>).clone(),</span><br><span class="line">        width = <span class="keyword">this</span>.ele.width(),</span><br><span class="line">        left = - (<span class="keyword">this</span>.index + <span class="number">1</span>) * <span class="keyword">this</span>.ele.width(); <span class="comment">//确认第一张图片的位置</span></span><br><span class="line">    <span class="keyword">this</span>.oUl.prepend(first).append(last).css(<span class="string">'left'</span>, left + <span class="string">'px'</span>);</span><br><span class="line">    <span class="keyword">this</span>.oUl.width((<span class="keyword">this</span>.count + <span class="number">2</span> ) * width);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着写一个createSpan()方法，用来动态创建span标签以及btn按钮。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">createSpan : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'&lt;div class="carousel-indicators"&gt;'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.count; i ++) &#123;</span><br><span class="line">        str += <span class="string">'&lt;span data-index="'</span> + i + <span class="string">'"&gt;&lt;/span&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">'&lt;/div&gt;&lt;span class="carousel-btn carousel-prev-btn"&gt;&lt;/span&gt;'</span> </span><br><span class="line">    + <span class="string">'&lt;span class="carousel-btn carousel-next-btn"&gt;&lt;/span&gt;'</span>;</span><br><span class="line">    <span class="keyword">this</span>.ele.append(str);</span><br><span class="line">    <span class="keyword">this</span>.ele.find(<span class="string">'.carousel-indicators span'</span>).eq(<span class="keyword">this</span>.index).addClass(<span class="string">'active'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着就是处理动画了，首先写一个ianimate()方法，用来处理动画，在这里面要注意，当图片动画结束后我们要处理圆点的效果以及图片的衔接问题。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ianimate : <span class="function"><span class="keyword">function</span>(<span class="params">ileft</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tleft = <span class="keyword">this</span>.oUl.position().left,</span><br><span class="line">    i = <span class="keyword">this</span>;</span><br><span class="line">        i.oUl.animate(&#123;</span><br><span class="line">            left : ileft + tleft</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> left = i.oUl.position().left,</span><br><span class="line">                width = i.ele.width();</span><br><span class="line">            ileft &gt; <span class="number">0</span> &amp;&amp; left &gt; -width &amp;&amp; i.oUl.css(<span class="string">'left'</span>, - i.count * width); <span class="comment">//判断是否是第0张（即最前面的最后一张）</span></span><br><span class="line">            ileft &lt; <span class="number">0</span> &amp;&amp; left &lt;  - i.count * width &amp;&amp; i.oUl.css(<span class="string">'left'</span>, -width); <span class="comment">//判断是否是最后一张（即最后面的第一张）</span></span><br><span class="line">            i.index = <span class="built_in">parseInt</span>(- left / width) - <span class="number">1</span>;</span><br><span class="line">            i.index = i.index &gt; i.count - <span class="number">1</span> ? <span class="number">0</span> : i.index;</span><br><span class="line">            i.index = i.index &lt; <span class="number">0</span> ? i.count - <span class="number">1</span> : i.index;</span><br><span class="line">            i.renBtns(); <span class="comment">// 给圆点添加特效</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是renBtns()方法，通过给对应的span添加类名来改变样式。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">renBtns : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ele.find(<span class="string">'.carousel-indicators span'</span>).removeClass(<span class="string">"active"</span>).eq(<span class="keyword">this</span>.index).addClass(<span class="string">'active'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当动画做好后就要去触发动画了，写一个eventBind()方法来放置圆点以及按钮的点击事件还有外层div的hover事件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eventBind : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="keyword">this</span>,</span><br><span class="line">        prev = <span class="keyword">this</span>.ele.find(<span class="string">".carousel-prev-btn"</span>),</span><br><span class="line">        next = <span class="keyword">this</span>.ele.find(<span class="string">".carousel-next-btn"</span>),</span><br><span class="line">        span = <span class="keyword">this</span>.ele.find(<span class="string">".carousel-indicators"</span>),</span><br><span class="line">        ileft = <span class="keyword">this</span>.ele.width();</span><br><span class="line">    prev.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        i.ianimate(ileft);</span><br><span class="line">    &#125;);</span><br><span class="line">    next.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        i.ianimate(-ileft);</span><br><span class="line">    &#125;);</span><br><span class="line">    span.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = event || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> target = e.target || e.srcElement;</span><br><span class="line">        i.ianimate(- ($(target).data(<span class="string">'index'</span>) - i.index) * ileft);</span><br><span class="line">    &#125;);</span><br><span class="line">    i.ele.hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(i.timer);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        i.automatic();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要处理外层div的hover事件，自然先要写一个方法automatic()用来触发动画自动播放。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">automatic : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> next = <span class="keyword">this</span>.ele.find(<span class="string">".carousel-next-btn"</span>);</span><br><span class="line">    <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        next.trigger(<span class="string">'click'</span>)</span><br><span class="line">    &#125;, <span class="keyword">this</span>.time)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了保证动画的流畅程度，在动画开始之前需要加一个判断，判断现在是否有正在进行的动画，刚开始我想到了加锁，但发现不是很好操作，于是查了一下文档，发现可以通过jq内置的is()方法来判断当前是否有动画在进行，如下。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!i.oUl.is(<span class="string">":animated"</span>)) &#123;</span><br><span class="line">    <span class="comment">//动画</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们只需要引用此插件并调用就可以了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'.box'</span>).sowingMap(&#123;</span><br><span class="line">    count : <span class="number">7</span>,</span><br><span class="line">    time : <span class="number">3000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>至此，主要功能以及编写完毕，只需要在处理一下细节，一个轮播图插件就做好了。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 插件 </tag>
            
            <tag> 轮播图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[原]简单CSS3+JQ实现图片的3D翻转</title>
      <link href="/blog/css/cjzjhsmut0034z0uzgbna2qwe/"/>
      <url>/blog/css/cjzjhsmut0034z0uzgbna2qwe/</url>
      
        <content type="html"><![CDATA[<p>没想到刚开始没两天就突然断了。还是要时刻鞭策自己啊。</p><p>主要实现效果：鼠标从不同的方向进入图片，图片所在的正方体就会以此方向翻转，显示文字介绍。</p><p>效果如下图</p><p><img src="https://img-blog.csdn.net/20180510221255147?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phY29veA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>此处的正方体只是形象的比喻方便理解。</p><p>如下图为计算机的坐标系，文字介绍所在块（后面简称B）与图片块（后面简称A）放于同一平面，但在Z轴上相差2px。</p><p>A与B被包在块C之中。</p><p><img src="https://img-blog.csdn.net/20180510224944729?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phY29veA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><ul><li>图片旋转</li></ul><p>当鼠标从上侧进入时，<strong>思路是</strong>先将后侧的B向上移动自身长度的距离，然后向上绕y轴向屏幕内侧旋转90度，得到A与B垂直的效果，即A仍在xoy平面，而B在yoz平面（具体什么样子，就不画图了。实在是画出来太难看了。）此时，若直接旋转C，就可以达到同时旋转A与B的效果，让C向下绕y轴向屏幕内侧旋转90度，B就会旋转到xoy平面，平行于屏幕，A就会旋转到yoz平面，垂直于屏幕。</p><p>当鼠标从其他三个方向进入时的思路与上侧进入的思路相类似，只是方向不同。</p><ul><li>鼠标进入方向的确定</li></ul><p>当明确了A与B的旋转之后，就要<strong>考虑如何获取鼠标是从哪个方向进入</strong>的了。</p><p>首先，我们重新创建一个坐标轴，以图片即A的中心为坐标原点，如下图所示。</p><p><img src="https://img-blog.csdn.net/20180510224617351?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phY29veA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>然后我们只需要知道鼠标当前的坐标在我们的新坐标系中的位置即可。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> width,<span class="comment">//图片宽度</span></span><br><span class="line">    height,<span class="comment">//图片高度</span></span><br><span class="line">    left,<span class="comment">//图片在默认坐标系中的x偏移量</span></span><br><span class="line">    top;<span class="comment">//图片在默认坐标系中的y偏移量</span></span><br><span class="line">x = e.pageX - left - width / <span class="number">2</span>;</span><br><span class="line">y = e.pageY - top - height / <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>知道了鼠标在新坐标系中的位置后，接下来就需要计算鼠标进入的方向了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">d=(<span class="built_in">Math</span>.round(((<span class="built_in">Math</span>.atan2(y,x)*(<span class="number">180</span>/<span class="built_in">Math</span>.PI))+<span class="number">180</span>)/<span class="number">90</span>)+<span class="number">3</span>)%<span class="number">4</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">Math</span>.atan2(y,x) <span class="comment">//返回x轴到(x,y)的角度的弧度值</span></span><br><span class="line">(<span class="built_in">Math</span>.atan2(y,x)*(<span class="number">180</span>/<span class="built_in">Math</span>.PI) <span class="comment">//将弧度值转换成角度</span></span><br><span class="line">((<span class="built_in">Math</span>.atan2(y,x)*(<span class="number">180</span>/<span class="built_in">Math</span>.PI))+<span class="number">180</span>)<span class="comment">//加180是为了将0度转换到x轴负半轴使角度看起来方便</span></span><br><span class="line">((<span class="built_in">Math</span>.atan2(y,x)*(<span class="number">180</span>/<span class="built_in">Math</span>.PI))+<span class="number">180</span>)/<span class="number">90</span><span class="comment">//除以90会得到一个0-4之间的浮点数</span></span><br><span class="line"><span class="built_in">Math</span>.round(((<span class="built_in">Math</span>.atan2(y,x)*(<span class="number">180</span>/<span class="built_in">Math</span>.PI))+<span class="number">180</span>)/<span class="number">90</span>)<span class="comment">//此操作将浮点数转换成正整数，此时还不能直接用，是因为此时的数字仍然表示的90度的范围，而不是某一方向</span></span><br><span class="line"><span class="built_in">Math</span>.round(((<span class="built_in">Math</span>.atan2(y,x)*(<span class="number">180</span>/<span class="built_in">Math</span>.PI))+<span class="number">180</span>)/<span class="number">90</span>)%<span class="number">4</span><span class="comment">//此操作将数字转换成了专指某一方向，0-左，1-上，2-右，3-下</span></span><br></pre></td></tr></table></figure><p>解决了这个问题，剩下的就是简单的DOM操作了。下面附上源码。</p><iframe height="530" style="width: 100%;" scrolling="no" title="JjPXQyX" src="//codepen.io/jacoxxx/embed/JjPXQyX/?height=265&theme-id=0&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/jacoxxx/pen/JjPXQyX/" target="_blank" rel="noopener">JjPXQyX</a> by Jaco Wu  (<a href="https://codepen.io/jacoxxx" target="_blank" rel="noopener">@jacoxxx</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 3D翻转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[原]jQuery实现翻页插件</title>
      <link href="/blog/js/cjzjhsmip000nz0uzw10v1xsx/"/>
      <url>/blog/js/cjzjhsmip000nz0uzw10v1xsx/</url>
      
        <content type="html"><![CDATA[<p>使用编辑器：vs code</p><p>主要用到的技术：css3 + jQuery</p><ul><li>html:这次html里面也没写什么东西，主要实在js文件中利用for循环动态生成结构。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>翻页插件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"fycj.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"fycj.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.page'</span>).create(&#123;</span></span><br><span class="line"><span class="javascript">            pageCount:<span class="number">20</span>,<span class="comment">//总页数</span></span></span><br><span class="line"><span class="javascript">            current:<span class="number">5</span>,<span class="comment">//当前页码</span></span></span><br><span class="line"><span class="javascript">            backFn:<span class="function"><span class="keyword">function</span>(<span class="params">p</span>)</span>&#123;&#125;<span class="comment">//回调函数</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>css文件：</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-class">.noPre</span>,</span><br><span class="line"><span class="selector-class">.current</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#428bca</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#428bca</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-class">.noPre</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-class">.current</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#428bca</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>js文件：内容看注释好了</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//入口函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">dom,arg</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//判断传入的页码是否符合标准</span></span><br><span class="line">        <span class="keyword">if</span>(arg.current &lt;= arg.pageCount)&#123;</span><br><span class="line">            fillhtml(dom,arg);</span><br><span class="line">            bindEvent(dom,arg);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">'请输入正确的页码'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//动态构建网页内容</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fillhtml</span>(<span class="params">dom,arg</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//清空页面布局</span></span><br><span class="line">        dom.empty();</span><br><span class="line">        <span class="comment">//大体分三部分：上一页，中间页码，下一页</span></span><br><span class="line">        <span class="comment">//上一页</span></span><br><span class="line">        <span class="comment">//上一页又分为可点击与不可点击两种</span></span><br><span class="line">        <span class="keyword">if</span>(arg.current &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            dom.append(<span class="string">'&lt;a class="prePage" href="#"&gt;上一页&lt;/a&gt;'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            dom.remove(<span class="string">'.prePage'</span>);</span><br><span class="line">            dom.append(<span class="string">'&lt;span class="noPre"&gt;上一页&lt;/span&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//中间页码</span></span><br><span class="line">        <span class="comment">//中间页码又分为中间可显示的5个页码与...与两端的页码</span></span><br><span class="line">        <span class="comment">//第一页</span></span><br><span class="line">        <span class="keyword">if</span>(arg.current != <span class="number">1</span> &amp;&amp; arg.current &gt; <span class="number">3</span>)&#123;</span><br><span class="line">            dom.append(<span class="string">'&lt;a class="tcdNum" href="#"&gt;1&lt;/a&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断当前页面是否距离第一页大于3，是则需要...</span></span><br><span class="line">        <span class="keyword">if</span>(arg.current<span class="number">-3</span> &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            dom.append(<span class="string">'&lt;span&gt;...&lt;/span&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断中间需要显示的页码</span></span><br><span class="line">        <span class="keyword">var</span> start = arg.current<span class="number">-2</span>;</span><br><span class="line">        <span class="keyword">var</span> end = arg.current+<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(;start &lt;= end;start++)&#123;</span><br><span class="line">            <span class="comment">//判断开始页面是否大于1且是否小于最大页码</span></span><br><span class="line">            <span class="keyword">if</span>(start &gt;= <span class="number">1</span> &amp;&amp; start &lt;= arg.pageCount)&#123;</span><br><span class="line">                <span class="comment">//判断是否是选中页面</span></span><br><span class="line">                <span class="keyword">if</span>(start == arg.current)&#123;</span><br><span class="line">                    dom.append(<span class="string">'&lt;span class="current"&gt;'</span>+start+<span class="string">'&lt;/span&gt;'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dom.append(<span class="string">'&lt;a class="tcdNum" href="#"&gt;'</span>+start+<span class="string">'&lt;/a&gt;'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后置的...</span></span><br><span class="line">        <span class="keyword">if</span>(arg.current+<span class="number">3</span> &lt; arg.pageCount)&#123;</span><br><span class="line">            dom.append(<span class="string">'&lt;span&gt;...&lt;/span&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后一页</span></span><br><span class="line">        <span class="keyword">if</span>(arg.current != arg.pageCount &amp;&amp; arg.current &lt; arg.pageCount<span class="number">-2</span>)&#123;</span><br><span class="line">            dom.append(<span class="string">'&lt;a class="tcdNum" href="#"&gt;'</span>+arg.pageCount+<span class="string">'&lt;/a&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下一页</span></span><br><span class="line">        <span class="comment">//下一页与上一页类似</span></span><br><span class="line">        <span class="keyword">if</span>(arg.current &lt; arg.pageCount)&#123;</span><br><span class="line">            dom.append(<span class="string">'&lt;a class="nextPage" href="#"&gt;下一页&lt;/a&gt;'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            dom.remove(<span class="string">'.prePage'</span>);</span><br><span class="line">            dom.append(<span class="string">'&lt;span class="noPre"&gt;下一页&lt;/span&gt;'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理点击事件</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params">dom,arg</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//分为点击上一页，点击页码与点击下一页</span></span><br><span class="line">        <span class="comment">//点击上一页</span></span><br><span class="line">        <span class="comment">//获得当前页面，-1 然后调用fillhtml重绘页面</span></span><br><span class="line">        dom.on(<span class="string">'click'</span>,<span class="string">'.prePage'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cur=<span class="built_in">parseInt</span>(dom.children(<span class="string">'.current'</span>).text());</span><br><span class="line">            fillhtml(dom,&#123;<span class="string">'current'</span>:cur<span class="number">-1</span>,<span class="string">'pageCount'</span>:arg.pageCount&#125;);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> arg.backFn==<span class="string">'function'</span>)&#123;</span><br><span class="line">                arg.backFn(cur<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//点击页码</span></span><br><span class="line">        <span class="comment">//获得点击页码，调用fillhtml重绘页面</span></span><br><span class="line">        dom.on(<span class="string">'click'</span>,<span class="string">'.tcdNum'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cur=<span class="built_in">parseInt</span>($(<span class="keyword">this</span>).text());</span><br><span class="line">            fillhtml(dom,&#123;<span class="string">'current'</span>:cur,<span class="string">'pageCount'</span>:arg.pageCount&#125;);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> arg.backFn==<span class="string">'function'</span>)&#123;</span><br><span class="line">                arg.backFn(cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//点击下一页</span></span><br><span class="line">        <span class="comment">//获得当前页面，+1 然后调用fillhtml重绘页面</span></span><br><span class="line">        dom.on(<span class="string">'click'</span>,<span class="string">'.nextPage'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cur=<span class="built_in">parseInt</span>(dom.children(<span class="string">'.current'</span>).text());</span><br><span class="line">            fillhtml(dom,&#123;<span class="string">'current'</span>:cur+<span class="number">1</span>,<span class="string">'pageCount'</span>:arg.pageCount&#125;);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> arg.backFn==<span class="string">'function'</span>)&#123;</span><br><span class="line">                arg.backFn(cur+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扩展jquery封装函数</span></span><br><span class="line">    $.fn.create=<span class="function"><span class="keyword">function</span>(<span class="params">option</span>)</span>&#123;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//      extend函数：当调用create时，如果传了参数option</span></span><br><span class="line"><span class="comment">//      则使用传入的参数，否则使用预定义的参数</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">        <span class="keyword">var</span> arg=$.extend(&#123;</span><br><span class="line">            pageCount:<span class="number">10</span>,</span><br><span class="line">            current:<span class="number">2</span>,</span><br><span class="line">            backFn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        &#125;,option)</span><br><span class="line">        init(<span class="keyword">this</span>,arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://img-blog.csdn.net/20180425213857431?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phY29veA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>欢迎留言批评指正。</p><p>(完)</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 插件 </tag>
            
            <tag> 翻页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[原]css3+jquery实现简单时钟特效</title>
      <link href="/blog/css/cjzjhskwr0004z0uzxsyn4i81/"/>
      <url>/blog/css/cjzjhskwr0004z0uzxsyn4i81/</url>
      
        <content type="html"><![CDATA[<p>初探前端开发，前期写一些小demo，后期会慢慢写些学习经验，欢迎各位看官交流学习经验（QQ:1759668379）</p><p>这个时钟特效是在腾讯课堂看渡一的js直播课时学到的，废话不多说，直接上源码。</p><ul><li>html文件：很简单的用div写整体框架，但是没有用到js动态生成div块。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html</span></span><br><span class="line"><span class="meta">        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"</span></span><br><span class="line"><span class="meta">        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数字时钟<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"demo.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"colt"</span>&gt;</span>:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"colt"</span>&gt;</span>:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"demo.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>CSS文件：为了提高可读性，所以css部分完全与html部分分离</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#0e141b</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span>,</span><br><span class="line"><span class="selector-class">.colt</span>&#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="built_in">rgba</span>(224, 230,235,0.89);</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">86px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">86px</span>;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: top;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">300ms</span> ease-in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.colt</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">translateY</span>(calc(50vh - 43px));</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>:opacity <span class="number">500ms</span>,text-shadow <span class="number">400ms</span>;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0.25</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span> <span class="selector-class">.visible</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>:<span class="number">1px</span> <span class="number">1px</span> <span class="number">30px</span> <span class="number">#336699</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span> <span class="selector-class">.close</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0.35</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span> <span class="selector-class">.far</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0.15</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span> <span class="selector-class">.dis</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0.1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>js文件：主要是针对对象，所有代码全部放在原型链上。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Index</span>(<span class="params">dom,use24H</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.column=<span class="built_in">Array</span>.from(dom);<span class="comment">//组件类</span></span><br><span class="line">    <span class="keyword">this</span>.use24H=use24H;<span class="comment">//时间</span></span><br><span class="line">    <span class="keyword">this</span>.classList=[<span class="string">'visible'</span>,<span class="string">'close'</span>,<span class="string">'far'</span>,<span class="string">'far'</span>,<span class="string">'dis'</span>,<span class="string">'dis'</span>];<span class="comment">//类名</span></span><br><span class="line">    <span class="keyword">this</span>.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始--》获取到当前时间</span></span><br><span class="line"><span class="comment">// --》当前时间 14 17 35 --&gt;字符串141735</span></span><br><span class="line"><span class="comment">//--&gt;六个数与六个类名为column的div分别对应上</span></span><br><span class="line"><span class="comment">//--&gt;分别找到每一列为当前时间的数字垂直局中显示 --根据数字大小调节在Y轴上移动的距离</span></span><br><span class="line"><span class="comment">//--&gt;同一列中不同数字位置不同 透明度不同（根据为每一个数字见不同的类名实现）</span></span><br><span class="line"> </span><br><span class="line">Index.prototype.start=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self=<span class="keyword">this</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> c=self.getClock();</span><br><span class="line">       self.column.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ele,index</span>) </span>&#123;<span class="comment">//遍历所有column类对象</span></span><br><span class="line">           <span class="keyword">var</span> n=+c[index];<span class="comment">//第n列</span></span><br><span class="line">           <span class="keyword">var</span> offset=n*<span class="number">86</span>;</span><br><span class="line">           $(ele).css(&#123;</span><br><span class="line">               <span class="string">'transform'</span>:<span class="string">'translateY(calc(50vh - '</span> + offset + <span class="string">'px - '</span> + <span class="number">43</span> + <span class="string">'px))'</span>  <span class="comment">//对应数字垂直居中显示</span></span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="built_in">Array</span>.from(ele.children).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ele2,index2</span>) </span>&#123;<span class="comment">//遍历column中的所有div</span></span><br><span class="line">               <span class="keyword">var</span> className=self.getClassName(n,index2);<span class="comment">//获取类名</span></span><br><span class="line">               $(ele2).attr(<span class="string">'class'</span>,className)<span class="comment">//动态添加类名</span></span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;,<span class="number">1000</span>)<span class="comment">//1秒刷新一次</span></span><br><span class="line">&#125;</span><br><span class="line">Index.prototype.getClassName=<span class="function"><span class="keyword">function</span>(<span class="params">n,index2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> className=<span class="keyword">this</span>.classList.find(<span class="function"><span class="keyword">function</span> (<span class="params">className,classindex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index2-classindex===n||index2+classindex===n;<span class="comment">//查找符合此方法的值</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> className||<span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line">Index.prototype.getClock=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d=<span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">this</span>.use24H?d.getHours():d.getHours()%<span class="number">12</span>||<span class="number">12</span>,</span><br><span class="line">    d.getMinutes(),d.getSeconds()].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">p,n</span>) </span>&#123;<span class="comment">//累加函数</span></span><br><span class="line">        <span class="keyword">return</span> (p+(<span class="string">'0'</span>+n).slice(<span class="number">-2</span>));<span class="comment">//保留后两位</span></span><br><span class="line">    &#125;,<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Index($(<span class="string">'.column'</span>),<span class="literal">true</span>);<span class="comment">//new一个对象</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://img-blog.csdn.net/20180425214114148?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phY29veA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>欢迎留言批评指正。</p><p>（完。）</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css3 </tag>
            
            <tag> 时钟特效 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[原]c++简单24点游戏</title>
      <link href="/blog/C/cjzjhskwa0000z0uzvttwk3kw/"/>
      <url>/blog/C/cjzjhskwa0000z0uzvttwk3kw/</url>
      
        <content type="html"><![CDATA[<p>随机生成4个代表扑克牌牌面的数字字母，程序自动列出所有可能算出24的表达式，用擅长的语言（C/C++/Java或其他均可）实现程序解决问题。</p><ol><li><p>程序风格良好(使用自定义注释模板)</p></li><li><p>列出表达式无重复。</p></li></ol><p>以下为源代码</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">char card[] = &#123; 'A','2','3','4','5','6','7','8','9','10','J','Q','K' &#125;;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">double</span> nums[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">char</span> ope[<span class="number">4</span>] = &#123; <span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'/'</span> &#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cre</span><span class="params">()</span><span class="comment">//生成</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"生成的四张牌面为："</span>;</span><br><span class="line">srand((<span class="keyword">unsigned</span>)time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">j =rand() % <span class="number">13</span>;</span><br><span class="line">buf[i] = card[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; buf[<span class="number">0</span>] &lt;&lt; <span class="string">";"</span> &lt;&lt; buf[<span class="number">1</span>] &lt;&lt; <span class="string">";"</span> &lt;&lt; buf[<span class="number">2</span>] &lt;&lt; <span class="string">";"</span> &lt;&lt; buf[<span class="number">3</span>] &lt;&lt; <span class="string">"。"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (buf[i] == <span class="string">'A'</span>) nums[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(buf[i] == <span class="string">'2'</span>) nums[i] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (buf[i] == <span class="string">'3'</span>) nums[i] = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (buf[i] == <span class="string">'4'</span>) nums[i] = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (buf[i] == <span class="string">'5'</span>) nums[i] = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (buf[i] == <span class="string">'6'</span>) nums[i] = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (buf[i] == <span class="string">'7'</span>) nums[i] = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (buf[i] == <span class="string">'8'</span>) nums[i] = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (buf[i] == <span class="string">'9'</span>) nums[i] = <span class="number">9</span>;</span><br><span class="line">else if (buf[i] == '10') nums[i] = 10;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (buf[i] == <span class="string">'J'</span>) nums[i] = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (buf[i] == <span class="string">'Q'</span>) nums[i] = <span class="number">12</span>; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (buf[i] == <span class="string">'K'</span>) nums[i] = <span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calcute</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">char</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="string">'+'</span>) <span class="keyword">return</span> a + b;  <span class="comment">//若为+，则返回相应结果   </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="string">'-'</span>) <span class="keyword">return</span> a - b;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="string">'*'</span>) <span class="keyword">return</span> a*b;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="string">'/'</span>)</span><br><span class="line"><span class="keyword">if</span> (b != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> a / b;    <span class="comment">//只有当分母不为0时，返回结果 </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exh</span><span class="params">()</span><span class="comment">//穷举计算</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span>  temp[<span class="number">3</span>], tem[<span class="number">2</span>];   <span class="comment">//第一个符号放置后，经过计算后相当于剩下三个数，这个数组用于存储这三个数  </span></span><br><span class="line"><span class="keyword">double</span>  sum;  <span class="comment">//求得的和  </span></span><br><span class="line"><span class="keyword">int</span>  judge = <span class="number">0</span>;   <span class="comment">//判断是否找到一个合理的解   </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)  <span class="comment">//第一次放置的符号  </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)   <span class="comment">//第二次放置的符号   </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)    <span class="comment">//第三次放置的符号    </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; <span class="number">3</span>; m++)      <span class="comment">//首先计算的两个相邻数字，共有3种情况，相当于括号的作用     </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (nums[m + <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; ope[i] == <span class="string">'/'</span>) <span class="keyword">break</span>;</span><br><span class="line">temp[m] = calcute(nums[m], nums[m + <span class="number">1</span>], ope[i]);</span><br><span class="line">temp[(m + <span class="number">1</span>) % <span class="number">3</span>] = nums[(m + <span class="number">2</span>) % <span class="number">4</span>];</span><br><span class="line">temp[(m + <span class="number">2</span>) % <span class="number">3</span>] = nums[(m + <span class="number">3</span>) % <span class="number">4</span>];      <span class="comment">//先确定首先计算的两个数字，计算完成相当于剩下三个数，按顺序储存在temp数组中       </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">2</span>; n++)       <span class="comment">//三个数字选出先计算的两个相邻数字，两种情况，相当于第二个括号       </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (temp[n + <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; ope[j] == <span class="string">'/'</span>) <span class="keyword">break</span>;</span><br><span class="line">tem[n] = calcute(temp[n], temp[n + <span class="number">1</span>], ope[j]);</span><br><span class="line">tem[(n + <span class="number">1</span>) % <span class="number">2</span>] = temp[(n + <span class="number">2</span>) % <span class="number">3</span>];        <span class="comment">//先确定首先计算的两个数字，计算完成相当于剩下两个数，按顺序储存在temp数组中        </span></span><br><span class="line"><span class="keyword">if</span> (tem[<span class="number">1</span>] == <span class="number">0</span> &amp;&amp; ope[k] == <span class="string">'/'</span>) <span class="keyword">break</span>;</span><br><span class="line">sum = calcute(tem[<span class="number">0</span>], tem[<span class="number">1</span>], ope[k]);       <span class="comment">//计算和               </span></span><br><span class="line"><span class="keyword">if</span> (sum == <span class="number">24</span>)        <span class="comment">//若和为24       </span></span><br><span class="line">&#123;</span><br><span class="line">judge = <span class="number">1</span>;         <span class="comment">//判断符为1，表示已求得解          </span></span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span> &amp;&amp; n == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"(("</span> &lt;&lt; nums[<span class="number">0</span>] &lt;&lt; ope[i] &lt;&lt; nums[<span class="number">1</span>] &lt;&lt; <span class="string">")"</span> &lt;&lt; ope[j] &lt;&lt; nums[<span class="number">2</span>] &lt;&lt; <span class="string">")"</span> &lt;&lt; ope[k] &lt;&lt; nums[<span class="number">3</span>] &lt;&lt; <span class="string">"="</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">0</span> &amp;&amp; n == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; nums[<span class="number">0</span>] &lt;&lt; ope[i] &lt;&lt; nums[<span class="number">1</span>] &lt;&lt; <span class="string">")"</span> &lt;&lt; ope[k] &lt;&lt; <span class="string">"("</span> &lt;&lt; nums[<span class="number">2</span>] &lt;&lt; ope[j] &lt;&lt; nums[<span class="number">3</span>] &lt;&lt; <span class="string">")="</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">1</span> &amp;&amp; n == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; nums[<span class="number">0</span>] &lt;&lt; ope[j] &lt;&lt; <span class="string">"("</span> &lt;&lt; nums[<span class="number">1</span>] &lt;&lt; ope[i] &lt;&lt; nums[<span class="number">2</span>] &lt;&lt; <span class="string">")"</span> &lt;&lt; ope[k] &lt;&lt; nums[<span class="number">3</span>] &lt;&lt; <span class="string">"="</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">1</span> &amp;&amp; n == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; nums[<span class="number">0</span>] &lt;&lt; ope[k] &lt;&lt; <span class="string">"(("</span> &lt;&lt; nums[<span class="number">1</span>] &lt;&lt; ope[i] &lt;&lt; nums[<span class="number">2</span>] &lt;&lt; <span class="string">")"</span> &lt;&lt; ope[j] &lt;&lt; nums[<span class="number">3</span>] &lt;&lt; <span class="string">")="</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">2</span> &amp;&amp; n == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; nums[<span class="number">0</span>] &lt;&lt; ope[j] &lt;&lt; nums[<span class="number">1</span>] &lt;&lt; <span class="string">")"</span> &lt;&lt; ope[k] &lt;&lt; <span class="string">"("</span> &lt;&lt; nums[<span class="number">2</span>] &lt;&lt; ope[i] &lt;&lt; nums[<span class="number">3</span>] &lt;&lt; <span class="string">")="</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">2</span> &amp;&amp; n == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; nums[<span class="number">0</span>] &lt;&lt; ope[k] &lt;&lt; <span class="string">"("</span> &lt;&lt; nums[<span class="number">1</span>] &lt;&lt; ope[j] &lt;&lt; <span class="string">"("</span> &lt;&lt; nums[<span class="number">2</span>] &lt;&lt; ope[i] &lt;&lt; nums[<span class="number">3</span>] &lt;&lt; <span class="string">"))="</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;          <span class="comment">//m=0,1,2 n=0,1表示六种括号放置可能，并按照这六种可能输出相应的格式的计算式               </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (judge == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"这四张扑克牌无法找到一个合理的解"</span> &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//如果没有找到结果，符号位为0 </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">"################################################"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">&lt;&lt; <span class="string">"#                                              #"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">&lt;&lt; <span class="string">"#              欢迎进入24点游戏                #"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">&lt;&lt; <span class="string">"#                                              #"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">&lt;&lt; <span class="string">"################################################"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">"################################################"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">&lt;&lt; <span class="string">"#                                              #"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">&lt;&lt; <span class="string">"#                是否开始游戏                  #"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">&lt;&lt; <span class="string">"#                                              #"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">&lt;&lt; <span class="string">"#          0.是              1.否              #"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">&lt;&lt; <span class="string">"#                                              #"</span> &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">&lt;&lt; <span class="string">"################################################"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入你的选择（0或1）："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line"><span class="keyword">switch</span> (i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">cre();</span><br><span class="line">exh();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">select = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请在0和1之间选择！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20170412202852472?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFjb294/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="效果图1"></p><p><img src="https://img-blog.csdn.net/20170412202749768?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFjb294/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="效果图2"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 24点游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[原]c语言求两个数的最大公约数</title>
      <link href="/blog/C/cjzjhsmj9000wz0uzje1p77ae/"/>
      <url>/blog/C/cjzjhsmj9000wz0uzje1p77ae/</url>
      
        <content type="html"><![CDATA[<p>从键盘输入两个整数，输出两个整数的最大公约数。</p><ol><li><p>程序风格良好(使用自定义注释模板)</p></li><li><p>使用三种算法解决问题</p></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">common</span>&#123;</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">div</span><span class="params">()</span></span>;<span class="comment">//辗转相除法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span></span>;<span class="comment">//相减法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exh</span><span class="params">()</span></span>;<span class="comment">//穷举法</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//辗转相除法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">div</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">a = m;</span><br><span class="line">b = n;</span><br><span class="line"><span class="keyword">if</span> (a &gt; b)</span><br><span class="line">&#123;</span><br><span class="line">x = a%b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">x = a;</span><br><span class="line">a = b;</span><br><span class="line">b = x;</span><br><span class="line">x = a%b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = b;</span><br><span class="line">b = x;</span><br><span class="line">x = a%b;</span><br><span class="line">&#125;</span><br><span class="line">printf_s(<span class="string">"最大公约数是%d。\n"</span>, b);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//相减法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">a = m;</span><br><span class="line">b = n;</span><br><span class="line"><span class="keyword">while</span> (a!=b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a &gt; b)</span><br><span class="line">&#123;</span><br><span class="line">a = a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">b = b - a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf_s(<span class="string">"最大公约数是%d。\n"</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//穷举法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exh</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">a = m;</span><br><span class="line">b = n;</span><br><span class="line"><span class="keyword">if</span> (a&gt;b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>  ( x = b; x &gt; <span class="number">0</span>;  x--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a%x == <span class="number">0</span> &amp;&amp; b%x == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">y = x;</span><br><span class="line">printf_s(<span class="string">"最大公约数是%d。\n"</span>, y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>  (x = a; x &gt;  <span class="number">0</span>; x--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a%x == <span class="number">0</span> &amp;&amp; b%x == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">y = x;</span><br><span class="line">printf_s(<span class="string">"最大公约数是%d。\n"</span>, y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> select = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">while</span> (select)</span><br><span class="line">&#123;</span><br><span class="line">printf_s(<span class="string">"请输入两个数(并以英文逗号隔开)："</span>);</span><br><span class="line">scanf_s(<span class="string">"%d,%d"</span>, &amp;m, &amp;n);</span><br><span class="line">printf_s(<span class="string">"\n"</span>);</span><br><span class="line">printf_s(<span class="string">"              *********************************************************\n"</span>);</span><br><span class="line">printf_s(<span class="string">"              #                                                       #\n"</span>);</span><br><span class="line">printf_s(<span class="string">"              #               求两数最大公约数                        #\n"</span>);</span><br><span class="line">printf_s(<span class="string">"              #                                                       #\n"</span>);</span><br><span class="line">printf_s(<span class="string">"              *********************************************************\n"</span>);</span><br><span class="line">printf_s(<span class="string">"              #                                                       #\n"</span>);</span><br><span class="line">printf_s(<span class="string">"              #       0.辗转相除法          1.相减法                  #\n"</span>);</span><br><span class="line">printf_s(<span class="string">"              #                                                       #\n"</span>);</span><br><span class="line">printf_s(<span class="string">"              #       2.穷举法              3.退出系统                #\n"</span>);</span><br><span class="line">printf_s(<span class="string">"              #                                                       #\n"</span>);</span><br><span class="line">printf_s(<span class="string">"              *********************************************************\n"</span>);</span><br><span class="line">printf_s(<span class="string">"\n"</span>);</span><br><span class="line">printf_s(<span class="string">"                    请选择您需要的操作序号(0-3)按回车确认:"</span>);</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">printf_s(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">switch</span> (i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">div();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">sub();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">exh();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">select = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">printf_s(<span class="string">"请在0-3之间选择\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果图：</p><p><img src="https://img-blog.csdn.net/20170322171001543?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFjb294/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="效果图1"></p><p><img src="https://img-blog.csdn.net/20170322171142529?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFjb294/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="效果图2"></p><p><img src="https://img-blog.csdn.net/20170322171151471?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFjb294/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="效果图3"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 公约数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[原]c初级打渔晒网问题</title>
      <link href="/blog/C/cjzjhskwl0001z0uzjb435xjn/"/>
      <url>/blog/C/cjzjhskwl0001z0uzjb435xjn/</url>
      
        <content type="html"><![CDATA[<p>原题目：某人从2010年1月1日起开始“三天打鱼两天晒网”，问这个人在以后的某一天中是“打鱼”还是“晒网”。</p><p>以下是程序源代码，初学者可能在很多地方不是很完善。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fish</span>&#123;</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> year, month, day;</span><br><span class="line"><span class="keyword">int</span> i;<span class="comment">//闰年</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//闰年个数</span></span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;<span class="comment">//平年个数</span></span><br><span class="line"><span class="keyword">int</span> y_s, m_s;<span class="comment">//年月差</span></span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;<span class="comment">//总日差</span></span><br><span class="line"><span class="keyword">int</span> r = <span class="number">0</span>;<span class="comment">//判断打渔晒网</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断年份</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断年分输入是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (year &lt; <span class="number">2010</span>) &#123;</span><br><span class="line">        printf_s(<span class="string">"year error!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//判断闰年</span></span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            i = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算年份</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    j = (year - <span class="number">2010</span>) / <span class="number">4</span>;<span class="comment">//计算闰年个数</span></span><br><span class="line">    k = (year - <span class="number">2010</span>) - j;<span class="comment">//计算平年个数</span></span><br><span class="line">    y_s = <span class="number">366</span> * j + <span class="number">365</span> * k;<span class="comment">//计算年份差</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断月份差</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">j_m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    judge();</span><br><span class="line">    <span class="keyword">if</span> (i = <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//计算月份差</span></span><br><span class="line">        <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                m_s = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                m_s = <span class="number">31</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                m_s = <span class="number">59</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                m_s = <span class="number">90</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                m_s = <span class="number">120</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                m_s = <span class="number">151</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                m_s = <span class="number">181</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                m_s = <span class="number">212</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                m_s = <span class="number">243</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                m_s = <span class="number">273</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                m_s = <span class="number">304</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                m_s = <span class="number">334</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                printf_s(<span class="string">"month error!\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//计算月份差</span></span><br><span class="line">        <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                m_s = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                m_s = <span class="number">31</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                m_s = <span class="number">58</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                m_s = <span class="number">89</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                m_s = <span class="number">119</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                m_s = <span class="number">150</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                m_s = <span class="number">180</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                m_s = <span class="number">211</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                m_s = <span class="number">242</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                m_s = <span class="number">272</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                m_s = <span class="number">303</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                m_s = <span class="number">333</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                printf_s(<span class="string">"month error!\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断打渔晒网</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reckon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    t = y_s + m_s + day;</span><br><span class="line">    r = t % <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//判断打渔晒网</span></span><br><span class="line">    <span class="keyword">switch</span> (r) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            printf_s(<span class="string">"今天晒网\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            printf_s(<span class="string">"今天打渔\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            printf_s(<span class="string">"今天晒网\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断日子</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">j_d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (month == <span class="number">1</span> || month == <span class="number">3</span> || month == <span class="number">5</span> || month == <span class="number">7</span> || month == <span class="number">8</span> || month == <span class="number">10</span> || month == <span class="number">12</span>  ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (day&lt;<span class="number">1</span>||day&gt;<span class="number">31</span>) &#123;</span><br><span class="line">            printf_s(<span class="string">"day error!\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reckon();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (month == <span class="number">4</span> || month == <span class="number">6</span> || month == <span class="number">9</span> || month == <span class="number">11</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (day&lt;<span class="number">1</span> || day&gt;<span class="number">30</span>) &#123;</span><br><span class="line">                printf_s(<span class="string">"day error!\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reckon();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (i=<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (day&lt;<span class="number">1</span> || day&gt;<span class="number">29</span>) &#123;</span><br><span class="line">                    printf_s(<span class="string">"day error!\n"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reckon();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (day&lt;<span class="number">1</span> || day&gt;<span class="number">28</span>) &#123;</span><br><span class="line">                    printf_s(<span class="string">"day error!\n"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reckon();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> choose=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (choose) &#123;</span><br><span class="line">        printf_s(<span class="string">"请输入一个日期（在2010.1.1以后的日期）并以英文逗号隔开：\n"</span>);</span><br><span class="line">        scanf_s(<span class="string">"%d,%d,%d"</span>, &amp;year, &amp;month, &amp;day);</span><br><span class="line">        <span class="keyword">if</span> (judge()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j_m()) &#123;</span><br><span class="line">                j_d();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf_s(<span class="string">"继续请输入1，结束请输入0：\n"</span>);</span><br><span class="line">        scanf_s(<span class="string">"%d"</span>,&amp;choose);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果图：</p><p><img src="https://img-blog.csdn.net/20170314224547180?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFjb294/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 打鱼晒网 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
